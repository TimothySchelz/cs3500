// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 14.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace GUITests
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// Opens the Spreadsheet
        /// </summary>
        public void OpenSpreadsheet()
        {

            // Launch '%USERPROFILE%\Source\Repos\CS3500Assignments\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest spreadsheetGUIApplication = ApplicationUnderTest.Launch(this.OpenSpreadsheetParams.ExePath, this.OpenSpreadsheetParams.AlternateExePath);
        }
        
        /// <summary>
        /// Enters the word "Hello" into cell A1.
        /// </summary>
        public void EnterContents()
        {
            #region Variable Declarations
            WinEdit uIContentsBoxEdit = this.UINewSpreadsheetsprdWindow.UIContentsBoxWindow.UIContentsBoxEdit;
            WinButton uIUpdateButton = this.UINewSpreadsheetsprdWindow.UIUpdateWindow.UIUpdateButton;
            #endregion

            // Type 'Hello' in 'ContentsBox' text box
            uIContentsBoxEdit.Text = this.EnterContentsParams.UIContentsBoxEditText;

            // Click 'Update' button
            Mouse.Click(uIUpdateButton, new Point(15, 3));
        }
        
        /// <summary>
        /// Checks to make sure that entries are put into the spreadsheet by checking the valueLabel and making sure it is the correct value.
        /// </summary>
        public void UpdateCheckedByValueLabel()
        {
            #region Variable Declarations
            WinText uIHelloText = this.UINewSpreadsheetsprdWindow.UIHelloWindow.UIHelloText;
            #endregion

            // Verify that the 'DisplayText' property of 'Hello' label equals 'Hello'
            Assert.AreEqual(this.UpdateCheckedByValueLabelExpectedValues.UIHelloTextDisplayText, uIHelloText.DisplayText, "Entered contentis not displayed in valueLabel.");
        }
        
        /// <summary>
        /// Uses the X button to exit the spreadsheet.
        /// </summary>
        public void Xout()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UINewSpreadsheetsprdWindow.UINewSpreadsheetsprdTitleBar.UICloseButton;
            WinButton uINOButton = this.UIThereareunsavedchangWindow.UINOWindow.UINOButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(27, 11));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(43, 12));
        }
        
        /// <summary>
        /// Checks to make sure the focus is on A1
        /// </summary>
        public void CheckFocusA1()
        {
            #region Variable Declarations
            WinText uIA1Text = this.UINewSpreadsheetsprdWindow.UIA1Window.UIA1Text;
            #endregion

            // Verify that the 'DisplayText' property of 'A1' label equals 'A1'
            Assert.AreEqual(this.CheckFocusA1ExpectedValues.UIA1TextDisplayText, uIA1Text.DisplayText, "The focused cell is incorrect");
        }
        
        /// <summary>
        /// Checks to make sure that the contentBox has Hello in it
        /// </summary>
        public void CheckContentBox()
        {
            #region Variable Declarations
            WinEdit uIContentsBoxEdit = this.UINewSpreadsheetsprdWindow.UIContentsBoxWindow.UIContentsBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'ContentsBox' text box equals 'Hello'
            Assert.AreEqual(this.CheckContentBoxExpectedValues.UIContentsBoxEditText, uIContentsBoxEdit.Text, "This should be Hello");
        }
        
        /// <summary>
        /// Overwrites A1 with "Goodby"
        /// </summary>
        public void OverwriteA1()
        {
            #region Variable Declarations
            WinEdit uIContentsBoxEdit = this.UINewSpreadsheetsprdWindow.UIContentsBoxWindow.UIContentsBoxEdit;
            WinMenuBar uIMenuStrip1MenuBar = this.UINewSpreadsheetsprdWindow.UIMenuStrip1Window.UIMenuStrip1MenuBar;
            WinText uIGoodbyeText = this.UINewSpreadsheetsprdWindow.UIHelloWindow.UIGoodbyeText;
            #endregion

            // Move 'ContentsBox' text box to 'menuStrip1' menu bar
            uIMenuStrip1MenuBar.EnsureClickable(new Point(114, 22));
            Mouse.StartDragging(uIContentsBoxEdit, new Point(12, 0));
            Mouse.StopDragging(uIMenuStrip1MenuBar, new Point(114, 22));

            // Click 'menuStrip1' menu bar
            Mouse.Click(uIMenuStrip1MenuBar, new Point(92, 23));

            // Type 'Goodbye' in 'ContentsBox' text box
            uIContentsBoxEdit.Text = this.OverwriteA1Params.UIContentsBoxEditText;

            // Type '{Enter}' in 'ContentsBox' text box
            Keyboard.SendKeys(uIContentsBoxEdit, this.OverwriteA1Params.UIContentsBoxEditSendKeys, ModifierKeys.None);

            // Click 'Goodbye' label
            Mouse.Click(uIGoodbyeText, new Point(20, 9));
        }
        
        /// <summary>
        /// makes sure Hello was overwritten with Goodbye in A1
        /// </summary>
        public void CheckOverwirteWorked()
        {
            #region Variable Declarations
            WinText uIGoodbyeText = this.UINewSpreadsheetsprdWindow.UIHelloWindow.UIGoodbyeText;
            #endregion

            // Verify that the 'DisplayText' property of 'Goodbye' label equals 'Goodbye'
            Assert.AreEqual(this.CheckOverwirteWorkedExpectedValues.UIGoodbyeTextDisplayText, uIGoodbyeText.DisplayText, "It should now be Goodbye");
        }
        
        #region Properties
        public virtual OpenSpreadsheetParams OpenSpreadsheetParams
        {
            get
            {
                if ((this.mOpenSpreadsheetParams == null))
                {
                    this.mOpenSpreadsheetParams = new OpenSpreadsheetParams();
                }
                return this.mOpenSpreadsheetParams;
            }
        }
        
        public virtual EnterContentsParams EnterContentsParams
        {
            get
            {
                if ((this.mEnterContentsParams == null))
                {
                    this.mEnterContentsParams = new EnterContentsParams();
                }
                return this.mEnterContentsParams;
            }
        }
        
        public virtual UpdateCheckedByValueLabelExpectedValues UpdateCheckedByValueLabelExpectedValues
        {
            get
            {
                if ((this.mUpdateCheckedByValueLabelExpectedValues == null))
                {
                    this.mUpdateCheckedByValueLabelExpectedValues = new UpdateCheckedByValueLabelExpectedValues();
                }
                return this.mUpdateCheckedByValueLabelExpectedValues;
            }
        }
        
        public virtual CheckFocusA1ExpectedValues CheckFocusA1ExpectedValues
        {
            get
            {
                if ((this.mCheckFocusA1ExpectedValues == null))
                {
                    this.mCheckFocusA1ExpectedValues = new CheckFocusA1ExpectedValues();
                }
                return this.mCheckFocusA1ExpectedValues;
            }
        }
        
        public virtual CheckContentBoxExpectedValues CheckContentBoxExpectedValues
        {
            get
            {
                if ((this.mCheckContentBoxExpectedValues == null))
                {
                    this.mCheckContentBoxExpectedValues = new CheckContentBoxExpectedValues();
                }
                return this.mCheckContentBoxExpectedValues;
            }
        }
        
        public virtual OverwriteA1Params OverwriteA1Params
        {
            get
            {
                if ((this.mOverwriteA1Params == null))
                {
                    this.mOverwriteA1Params = new OverwriteA1Params();
                }
                return this.mOverwriteA1Params;
            }
        }
        
        public virtual CheckOverwirteWorkedExpectedValues CheckOverwirteWorkedExpectedValues
        {
            get
            {
                if ((this.mCheckOverwirteWorkedExpectedValues == null))
                {
                    this.mCheckOverwirteWorkedExpectedValues = new CheckOverwirteWorkedExpectedValues();
                }
                return this.mCheckOverwirteWorkedExpectedValues;
            }
        }
        
        public UINewSpreadsheetsprdWindow UINewSpreadsheetsprdWindow
        {
            get
            {
                if ((this.mUINewSpreadsheetsprdWindow == null))
                {
                    this.mUINewSpreadsheetsprdWindow = new UINewSpreadsheetsprdWindow();
                }
                return this.mUINewSpreadsheetsprdWindow;
            }
        }
        
        public UIThereareunsavedchangWindow UIThereareunsavedchangWindow
        {
            get
            {
                if ((this.mUIThereareunsavedchangWindow == null))
                {
                    this.mUIThereareunsavedchangWindow = new UIThereareunsavedchangWindow();
                }
                return this.mUIThereareunsavedchangWindow;
            }
        }
        #endregion
        
        #region Fields
        private OpenSpreadsheetParams mOpenSpreadsheetParams;
        
        private EnterContentsParams mEnterContentsParams;
        
        private UpdateCheckedByValueLabelExpectedValues mUpdateCheckedByValueLabelExpectedValues;
        
        private CheckFocusA1ExpectedValues mCheckFocusA1ExpectedValues;
        
        private CheckContentBoxExpectedValues mCheckContentBoxExpectedValues;
        
        private OverwriteA1Params mOverwriteA1Params;
        
        private CheckOverwirteWorkedExpectedValues mCheckOverwirteWorkedExpectedValues;
        
        private UINewSpreadsheetsprdWindow mUINewSpreadsheetsprdWindow;
        
        private UIThereareunsavedchangWindow mUIThereareunsavedchangWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OpenSpreadsheet'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OpenSpreadsheetParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\CS3500Assignments\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string ExePath = @"..\\..\\..\\CS3500Assignments\\PS4\\SpreadsheetGUI\\bin\\Debu" +
            "g\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\CS3500Assignments\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string AlternateExePath = @"..\\..\\..\\SpreadsheetGUI\\bin\\Debug\\Spreads" +
            "heetGUI.exe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'EnterContents'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class EnterContentsParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Hello' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditText = "Hello";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'UpdateCheckedByValueLabel'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UpdateCheckedByValueLabelExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Hello' label equals 'Hello'
        /// </summary>
        public string UIHelloTextDisplayText = "Hello";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckFocusA1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckFocusA1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'A1' label equals 'A1'
        /// </summary>
        public string UIA1TextDisplayText = "A1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckContentBox'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckContentBoxExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'ContentsBox' text box equals 'Hello'
        /// </summary>
        public string UIContentsBoxEditText = "Hello";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OverwriteA1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OverwriteA1Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'Goodbye' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditText = "Goodbye";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckOverwirteWorked'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckOverwirteWorkedExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Goodbye' label equals 'Goodbye'
        /// </summary>
        public string UIGoodbyeTextDisplayText = "Goodbye";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINewSpreadsheetsprdWindow : WinWindow
    {
        
        public UINewSpreadsheetsprdWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "NewSpreadsheet.sprd";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("NewSpreadsheet.sprd");
            #endregion
        }
        
        #region Properties
        public UIContentsBoxWindow UIContentsBoxWindow
        {
            get
            {
                if ((this.mUIContentsBoxWindow == null))
                {
                    this.mUIContentsBoxWindow = new UIContentsBoxWindow(this);
                }
                return this.mUIContentsBoxWindow;
            }
        }
        
        public UIUpdateWindow UIUpdateWindow
        {
            get
            {
                if ((this.mUIUpdateWindow == null))
                {
                    this.mUIUpdateWindow = new UIUpdateWindow(this);
                }
                return this.mUIUpdateWindow;
            }
        }
        
        public UIHelloWindow UIHelloWindow
        {
            get
            {
                if ((this.mUIHelloWindow == null))
                {
                    this.mUIHelloWindow = new UIHelloWindow(this);
                }
                return this.mUIHelloWindow;
            }
        }
        
        public UINewSpreadsheetsprdTitleBar UINewSpreadsheetsprdTitleBar
        {
            get
            {
                if ((this.mUINewSpreadsheetsprdTitleBar == null))
                {
                    this.mUINewSpreadsheetsprdTitleBar = new UINewSpreadsheetsprdTitleBar(this);
                }
                return this.mUINewSpreadsheetsprdTitleBar;
            }
        }
        
        public UIA1Window UIA1Window
        {
            get
            {
                if ((this.mUIA1Window == null))
                {
                    this.mUIA1Window = new UIA1Window(this);
                }
                return this.mUIA1Window;
            }
        }
        
        public UIMenuStrip1Window UIMenuStrip1Window
        {
            get
            {
                if ((this.mUIMenuStrip1Window == null))
                {
                    this.mUIMenuStrip1Window = new UIMenuStrip1Window(this);
                }
                return this.mUIMenuStrip1Window;
            }
        }
        #endregion
        
        #region Fields
        private UIContentsBoxWindow mUIContentsBoxWindow;
        
        private UIUpdateWindow mUIUpdateWindow;
        
        private UIHelloWindow mUIHelloWindow;
        
        private UINewSpreadsheetsprdTitleBar mUINewSpreadsheetsprdTitleBar;
        
        private UIA1Window mUIA1Window;
        
        private UIMenuStrip1Window mUIMenuStrip1Window;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIContentsBoxWindow : WinWindow
    {
        
        public UIContentsBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "ContentsBox";
            this.WindowTitles.Add("NewSpreadsheet.sprd");
            #endregion
        }
        
        #region Properties
        public WinEdit UIContentsBoxEdit
        {
            get
            {
                if ((this.mUIContentsBoxEdit == null))
                {
                    this.mUIContentsBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIContentsBoxEdit.WindowTitles.Add("NewSpreadsheet.sprd");
                    #endregion
                }
                return this.mUIContentsBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIContentsBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIUpdateWindow : WinWindow
    {
        
        public UIUpdateWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "Enter";
            this.WindowTitles.Add("NewSpreadsheet.sprd");
            #endregion
        }
        
        #region Properties
        public WinButton UIUpdateButton
        {
            get
            {
                if ((this.mUIUpdateButton == null))
                {
                    this.mUIUpdateButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIUpdateButton.SearchProperties[WinButton.PropertyNames.Name] = "Update";
                    this.mUIUpdateButton.WindowTitles.Add("NewSpreadsheet.sprd");
                    #endregion
                }
                return this.mUIUpdateButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIUpdateButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIHelloWindow : WinWindow
    {
        
        public UIHelloWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "ValueLabel";
            this.WindowTitles.Add("NewSpreadsheet.sprd");
            #endregion
        }
        
        #region Properties
        public WinText UIHelloText
        {
            get
            {
                if ((this.mUIHelloText == null))
                {
                    this.mUIHelloText = new WinText(this);
                    #region Search Criteria
                    this.mUIHelloText.SearchProperties[WinText.PropertyNames.Name] = "Hello";
                    this.mUIHelloText.WindowTitles.Add("NewSpreadsheet.sprd");
                    #endregion
                }
                return this.mUIHelloText;
            }
        }
        
        public WinText UIGoodbyeText
        {
            get
            {
                if ((this.mUIGoodbyeText == null))
                {
                    this.mUIGoodbyeText = new WinText(this);
                    #region Search Criteria
                    this.mUIGoodbyeText.SearchProperties[WinText.PropertyNames.Name] = "Goodbye";
                    this.mUIGoodbyeText.WindowTitles.Add("NewSpreadsheet.sprd");
                    #endregion
                }
                return this.mUIGoodbyeText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIHelloText;
        
        private WinText mUIGoodbyeText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINewSpreadsheetsprdTitleBar : WinTitleBar
    {
        
        public UINewSpreadsheetsprdTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("NewSpreadsheet.sprd");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("NewSpreadsheet.sprd");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIA1Window : WinWindow
    {
        
        public UIA1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "SelectionLabel";
            this.WindowTitles.Add("NewSpreadsheet.sprd");
            #endregion
        }
        
        #region Properties
        public WinText UIA1Text
        {
            get
            {
                if ((this.mUIA1Text == null))
                {
                    this.mUIA1Text = new WinText(this);
                    #region Search Criteria
                    this.mUIA1Text.SearchProperties[WinText.PropertyNames.Name] = "A1";
                    this.mUIA1Text.WindowTitles.Add("NewSpreadsheet.sprd");
                    #endregion
                }
                return this.mUIA1Text;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIA1Text;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIMenuStrip1Window : WinWindow
    {
        
        public UIMenuStrip1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "menuStrip1";
            this.WindowTitles.Add("NewSpreadsheet.sprd");
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIMenuStrip1MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
                    this.mUIMenuStrip1MenuBar.WindowTitles.Add("NewSpreadsheet.sprd");
                    #endregion
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIMenuStrip1MenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIThereareunsavedchangWindow : WinWindow
    {
        
        public UIThereareunsavedchangWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "There are unsaved changes.";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("There are unsaved changes.");
            #endregion
        }
        
        #region Properties
        public UINOWindow UINOWindow
        {
            get
            {
                if ((this.mUINOWindow == null))
                {
                    this.mUINOWindow = new UINOWindow(this);
                }
                return this.mUINOWindow;
            }
        }
        #endregion
        
        #region Fields
        private UINOWindow mUINOWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINOWindow : WinWindow
    {
        
        public UINOWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "7";
            this.WindowTitles.Add("There are unsaved changes.");
            #endregion
        }
        
        #region Properties
        public WinButton UINOButton
        {
            get
            {
                if ((this.mUINOButton == null))
                {
                    this.mUINOButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINOButton.SearchProperties[WinButton.PropertyNames.Name] = "No";
                    this.mUINOButton.WindowTitles.Add("There are unsaved changes.");
                    #endregion
                }
                return this.mUINOButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINOButton;
        #endregion
    }
}
