// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 14.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#if false
namespace GUITests
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// Opens the Spreadsheet
        /// </summary>
        public void OpenSpreadsheet()
        {

            // Launch '%USERPROFILE%\Source\Repos\CS3500Assignments\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest spreadsheetGUIApplication = ApplicationUnderTest.Launch(this.OpenSpreadsheetParams.ExePath, this.OpenSpreadsheetParams.AlternateExePath);
        }
        
        /// <summary>
        /// Enters the word "Hello" into cell A1.
        /// </summary>
        public void EnterContents()
        {
            #region Variable Declarations
            WinEdit uIContentsBoxEdit = this.UINewSpreadsheetsprdWindow.UIContentsBoxWindow.UIContentsBoxEdit;
            WinButton uIUpdateButton = this.UINewSpreadsheetsprdWindow.UIUpdateWindow.UIUpdateButton;
            #endregion

            // Type 'Hello' in 'ContentsBox' text box
            uIContentsBoxEdit.Text = this.EnterContentsParams.UIContentsBoxEditText;

            // Click 'Update' button
            Mouse.Click(uIUpdateButton, new Point(15, 3));
        }
        
        /// <summary>
        /// Checks to make sure that entries are put into the spreadsheet by checking the valueLabel and making sure it is the correct value.
        /// </summary>
        public void UpdateCheckedByValueLabel()
        {
            #region Variable Declarations
            WinText uIHelloText = this.UINewSpreadsheetsprdWindow.UIHelloWindow.UIHelloText;
            #endregion

            // Verify that the 'DisplayText' property of 'Hello' label equals 'Hello'
            Assert.AreEqual(this.UpdateCheckedByValueLabelExpectedValues.UIHelloTextDisplayText, uIHelloText.DisplayText, "Entered contentis not displayed in valueLabel.");
        }
        
        /// <summary>
        /// Uses the X button to exit the spreadsheet.
        /// </summary>
        public void Xout()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UINewSpreadsheetsprdWindow.UINewSpreadsheetsprdTitleBar.UICloseButton;
            WinButton uINOButton = this.UIThereareunsavedchangWindow.UINOWindow.UINOButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(27, 11));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(43, 12));
        }
        
        /// <summary>
        /// Checks to make sure the focus is on A1
        /// </summary>
        public void CheckFocusA1()
        {
            #region Variable Declarations
            WinText uIA1Text = this.UINewSpreadsheetsprdWindow.UIA1Window.UIA1Text;
            #endregion

            // Verify that the 'DisplayText' property of 'A1' label equals 'A1'
            Assert.AreEqual(this.CheckFocusA1ExpectedValues.UIA1TextDisplayText, uIA1Text.DisplayText, "The focused cell is incorrect");
        }
        
        /// <summary>
        /// Checks to make sure that the contentBox has Hello in it
        /// </summary>
        public void CheckContentBox()
        {
            #region Variable Declarations
            WinEdit uIContentsBoxEdit = this.UINewSpreadsheetsprdWindow.UIContentsBoxWindow.UIContentsBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'ContentsBox' text box equals 'Hello'
            Assert.AreEqual(this.CheckContentBoxExpectedValues.UIContentsBoxEditText, uIContentsBoxEdit.Text, "This should be Hello");
        }
        
        /// <summary>
        /// Overwrites A1 with "Goodby"
        /// </summary>
        public void OverwriteA1()
        {
            #region Variable Declarations
            WinEdit uIContentsBoxEdit = this.UINewSpreadsheetsprdWindow.UIContentsBoxWindow.UIContentsBoxEdit;
            WinMenuBar uIMenuStrip1MenuBar = this.UINewSpreadsheetsprdWindow.UIMenuStrip1Window.UIMenuStrip1MenuBar;
            WinText uIGoodbyeText = this.UINewSpreadsheetsprdWindow.UIHelloWindow.UIGoodbyeText;
            #endregion

            // Move 'ContentsBox' text box to 'menuStrip1' menu bar
            uIMenuStrip1MenuBar.EnsureClickable(new Point(114, 22));
            Mouse.StartDragging(uIContentsBoxEdit, new Point(12, 0));
            Mouse.StopDragging(uIMenuStrip1MenuBar, new Point(114, 22));

            // Click 'menuStrip1' menu bar
            Mouse.Click(uIMenuStrip1MenuBar, new Point(92, 23));

            // Type 'Goodbye' in 'ContentsBox' text box
            uIContentsBoxEdit.Text = this.OverwriteA1Params.UIContentsBoxEditText;

            // Type '{Enter}' in 'ContentsBox' text box
            Keyboard.SendKeys(uIContentsBoxEdit, this.OverwriteA1Params.UIContentsBoxEditSendKeys, ModifierKeys.None);

            // Click 'Goodbye' label
            Mouse.Click(uIGoodbyeText, new Point(20, 9));
        }
        
        /// <summary>
        /// makes sure Hello was overwritten with Goodbye in A1
        /// </summary>
        public void CheckOverwirteWorked()
        {
            #region Variable Declarations
            WinText uIGoodbyeText = this.UINewSpreadsheetsprdWindow.UIHelloWindow.UIGoodbyeText;
            #endregion

            // Verify that the 'DisplayText' property of 'Goodbye' label equals 'Goodbye'
            Assert.AreEqual(this.CheckOverwirteWorkedExpectedValues.UIGoodbyeTextDisplayText, uIGoodbyeText.DisplayText, "It should now be Goodbye");
        }
        
        /// <summary>
        /// Opens a second spreadsheet off of an empty spreadsheet.
        /// </summary>
        public void OpenSecondSpreadsheet()
        {
            #region Variable Declarations
            WinMenuItem uINewMenuItem = this.UINewSpreadsheetsprdWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UINewMenuItem;
            #endregion

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(29, 12));
        }
        
        /// <summary>
        /// checks that the contents box on the second spreadsheet is empty
        /// </summary>
        public void CheckEmptyContentsOnSecondSpreadsheet()
        {
            #region Variable Declarations
            WinEdit uIContentsBoxEdit = this.UINewSpreadsheetsprdWindow1.UIContentsBoxWindow.UIContentsBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'ContentsBox' text box equals ''
            Assert.AreEqual(this.CheckEmptyContentsOnSecondSpreadsheetExpectedValues.UIContentsBoxEditText, uIContentsBoxEdit.Text, "the contents box should be empty");
        }
        
        /// <summary>
        /// Closes 2 empty spreadsheets
        /// </summary>
        public void Close2EmptySpreadsheets()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UINewSpreadsheetsprdWindow.UINewSpreadsheetsprdTitleBar.UICloseButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(21, 11));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(30, 11));
        }
        
        /// <summary>
        /// Puts a value into the first spreadsheet and then uses new to open another spreadsheet.
        /// </summary>
        public void InputInSS1AndOpenSS2()
        {
            #region Variable Declarations
            WinEdit uIContentsBoxEdit = this.UINewSpreadsheetsprdWindow.UIContentsBoxWindow.UIContentsBoxEdit;
            WinButton uIUpdateButton = this.UINewSpreadsheetsprdWindow.UIUpdateWindow1.UIUpdateButton;
            WinMenuItem uINewMenuItem = this.UINewSpreadsheetsprdWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UINewMenuItem;
            WinClient uISpreadsheetPanel1Client = this.UINewSpreadsheetsprdWindow1.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Type 'Hello' in 'ContentsBox' text box
            uIContentsBoxEdit.Text = this.InputInSS1AndOpenSS2Params.UIContentsBoxEditText;

            // Click 'ContentsBox' text box
            Mouse.Click(uIContentsBoxEdit, new Point(115, 9));

            // Click 'Update' button
            Mouse.Click(uIUpdateButton, new Point(36, 9));

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(32, 2));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(76, 40));
        }
        
        /// <summary>
        /// Checks to make sure the new spreadsheet doesn't have an entry in A1 and the old SS has "Hello" there.
        /// </summary>
        public void CheckContentsOfOldAndNewSS()
        {
            #region Variable Declarations
            WinEdit uIContentsBoxEdit = this.UINewSpreadsheetsprdWindow1.UIContentsBoxWindow.UIContentsBoxEdit;
            WinEdit uIContentsBoxEdit1 = this.UINewSpreadsheetsprdWindow.UIContentsBoxWindow.UIContentsBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'ContentsBox' text box equals ''
            Assert.AreEqual(this.CheckContentsOfOldAndNewSSExpectedValues.UIContentsBoxEditText, uIContentsBoxEdit.Text, "There should be nothing in the new Spreadsheet");

            // Verify that the 'Text' property of 'ContentsBox' text box equals 'Hello'
            Assert.AreEqual(this.CheckContentsOfOldAndNewSSExpectedValues.UIContentsBoxEditText1, uIContentsBoxEdit1.Text, "Old Spreadhseet should still have hello in the contents");
        }
        
        /// <summary>
        /// closes the spreadsheets
        /// </summary>
        public void CloseSpreadsheets()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UINewSpreadsheetsprdWindow1.UINewSpreadsheetsprdTitleBar.UICloseButton;
            WinButton uICloseButton1 = this.UINewSpreadsheetsprdWindow.UINewSpreadsheetsprdTitleBar.UICloseButton;
            WinButton uINOButton = this.UIThereareunsavedchangWindow.UINOWindow.UINOButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(20, 11));

            // Click 'Close' button
            Mouse.Click(uICloseButton1, new Point(30, 16));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(37, 15));
        }
        
        /// <summary>
        /// Opens a second spreadsheet and then enters Hello into A1 in SS2 and Goodbye into B1 in SS1.
        /// </summary>
        public void OpenSecondSSAndEnterValues()
        {
            #region Variable Declarations
            WinMenuItem uINewMenuItem = this.UINewSpreadsheetsprdWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UINewMenuItem;
            WinEdit uIContentsBoxEdit = this.UINewSpreadsheetsprdWindow1.UIContentsBoxWindow.UIContentsBoxEdit;
            WinButton uIUpdateButton = this.UINewSpreadsheetsprdWindow1.UIUpdateWindow.UIUpdateButton;
            WinClient uISpreadsheetPanel1Client = this.UINewSpreadsheetsprdWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIContentsBoxEdit1 = this.UINewSpreadsheetsprdWindow.UIContentsBoxWindow.UIContentsBoxEdit;
            WinButton uIUpdateButton1 = this.UINewSpreadsheetsprdWindow.UIUpdateWindow1.UIUpdateButton;
            #endregion

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(66, 11));

            // Type 'Hello' in 'ContentsBox' text box
            uIContentsBoxEdit.Text = this.OpenSecondSSAndEnterValuesParams.UIContentsBoxEditText;

            // Click 'Update' button
            Mouse.Click(uIUpdateButton, new Point(41, 7));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(134, 35));

            // Type 'Goodbye' in 'ContentsBox' text box
            uIContentsBoxEdit1.Text = this.OpenSecondSSAndEnterValuesParams.UIContentsBoxEditText1;

            // Click 'Update' button
            Mouse.Click(uIUpdateButton1, new Point(9, 8));
        }
        
        /// <summary>
        /// Makes sure that the entries in one spreadsheet are not copied over to another spreadsheet.  i.e. they are seperate spreadsheets.
        /// </summary>
        public void CheckSS1B2AndSS2A1()
        {
            #region Variable Declarations
            WinText uIB1Text = this.UINewSpreadsheetsprdWindow.UIA1Window.UIB1Text;
            WinText uIGoodbyeText = this.UINewSpreadsheetsprdWindow.UIHelloWindow.UIGoodbyeText;
            WinText uIA1Text = this.UINewSpreadsheetsprdWindow1.UIA1Window.UIA1Text;
            WinText uIHelloText = this.UINewSpreadsheetsprdWindow1.UIHelloWindow.UIHelloText;
            #endregion

            // Verify that the 'Name' property of 'B1' label equals 'B1'
            Assert.AreEqual(this.CheckSS1B2AndSS2A1ExpectedValues.UIB1TextName, uIB1Text.Name, "Makes sure we are looking at cell B1 in SS1");

            // Verify that the 'DisplayText' property of 'Goodbye' label equals 'Goodbye'
            Assert.AreEqual(this.CheckSS1B2AndSS2A1ExpectedValues.UIGoodbyeTextDisplayText, uIGoodbyeText.DisplayText, "Makes sure the value is Goodbye in B1 in SS1");

            // Verify that the 'DisplayText' property of 'A1' label equals 'A1'
            Assert.AreEqual(this.CheckSS1B2AndSS2A1ExpectedValues.UIA1TextDisplayText, uIA1Text.DisplayText, "Makes sure we are looking at A1 in SS2");

            // Verify that the 'DisplayText' property of 'Hello' label equals 'Hello'
            Assert.AreEqual(this.CheckSS1B2AndSS2A1ExpectedValues.UIHelloTextDisplayText, uIHelloText.DisplayText, "Makes sure the value of A1 is correct in SS2");
        }
        
        /// <summary>
        /// Closes both windows
        /// </summary>
        public void Closing()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UINewSpreadsheetsprdWindow.UINewSpreadsheetsprdTitleBar.UICloseButton;
            WinButton uINOButton = this.UIThereareunsavedchangWindow.UINOWindow.UINOButton;
            WinButton uICloseButton1 = this.UINewSpreadsheetsprdWindow1.UINewSpreadsheetsprdTitleBar.UICloseButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(27, 22));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(47, 20));

            // Click 'Close' button
            Mouse.Click(uICloseButton1, new Point(38, 6));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(5, 18));
        }
        
        /// <summary>
        /// Opens a new window and then closes the original window.
        /// </summary>
        public void OpenNewCloseOriginal()
        {
            #region Variable Declarations
            WinMenuItem uINewMenuItem = this.UINewSpreadsheetsprdWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UINewMenuItem;
            WinTitleBar uINewSpreadsheetsprdTitleBar = this.UINewSpreadsheetsprdWindow.UINewSpreadsheetsprdTitleBar;
            WinButton uICloseButton = this.UINewSpreadsheetsprdWindow.UINewSpreadsheetsprdTitleBar.UICloseButton;
            #endregion

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(37, 6));

            // Click 'NewSpreadsheet.sprd' title bar
            Mouse.Click(uINewSpreadsheetsprdTitleBar, new Point(91, 4));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(13, 15));
        }
        
        /// <summary>
        /// Makes sure the second window is still open.
        /// </summary>
        public void SecondWindowExists()
        {
            #region Variable Declarations
            WinWindow uINewSpreadsheetsprdWindow = this.UINewSpreadsheetsprdWindow;
            #endregion

            // Verify that the 'Name' property of 'NewSpreadsheet.sprd' window equals 'NewSpreadsheet.sprd'
            Assert.AreEqual(this.SecondWindowExistsExpectedValues.UINewSpreadsheetsprdWindowName, uINewSpreadsheetsprdWindow.Name, "This window Doesn\'t Exist!  You have a problem.");
        }
        
        /// <summary>
        /// closes the second window
        /// </summary>
        public void CloseSecond()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UINewSpreadsheetsprdWindow.UINewSpreadsheetsprdTitleBar.UICloseButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(35, 10));
        }
        
        /// <summary>
        /// Opens the help Pop up
        /// </summary>
        public void OpenHelp()
        {
            #region Variable Declarations
            WinMenuItem uIHelpMenuItem = this.UINewSpreadsheetsprdWindow.UIMenuStrip1MenuBar.UIHelpMenuItem;
            #endregion

            // Click 'Help' menu item
            Mouse.Click(uIHelpMenuItem, new Point(35, 11));
        }
        
        /// <summary>
        /// checks the text of the help popup.  This text may change later and this test will need to be fixed.
        /// </summary>
        public void CheckHelpText()
        {
            #region Variable Declarations
            WinText uIClickonanycellwithyoText = this.UIClickonanycellwithyoWindow.UIClickonanycellwithyoText;
            #endregion

            // Verify that the 'DisplayText' property of 'Click on any cell with your mouse to select it. At...' label equals 'Click on any cell with your mouse to select it.  At the top the cell name and the value are displayed.  Next to them is an editable textbox with the current contents of the cells.  You can change the contents in this textbox and then hit "Update" or type ENTER to update the contents of the cell.'
            Assert.AreEqual(this.CheckHelpTextExpectedValues.UIClickonanycellwithyoTextDisplayText, uIClickonanycellwithyoText.DisplayText, "This should display the correct information.");
        }
        
        /// <summary>
        /// Closes the help popup and the SS.
        /// </summary>
        public void CloseHelpandWindow()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            WinButton uICloseButton = this.UINewSpreadsheetsprdWindow.UINewSpreadsheetsprdTitleBar.UICloseButton;
            #endregion

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(45, 0));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(30, 18));
        }
        
        /// <summary>
        /// ChangeToB2
        /// </summary>
        public void ChangeToB2()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UINewSpreadsheetsprdWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(142, 61));
        }
        
        /// <summary>
        /// SelectionB2
        /// </summary>
        public void SelectionB2()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UINewSpreadsheetsprdWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(144, 67));
        }
        
        /// <summary>
        /// Makes sure the name label is the current selection.
        /// </summary>
        public void NameLabelB2()
        {
            #region Variable Declarations
            WinText uIB2Text = this.UINewSpreadsheetsprdWindow.UIA1Window.UIB2Text;
            #endregion

            // Verify that the 'Name' property of 'B2' label equals 'B2'
            Assert.AreEqual(this.NameLabelB2ExpectedValues.UIB2TextName, uIB2Text.Name);
        }
        
        /// <summary>
        /// SelectB7
        /// </summary>
        public void SelectB7()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UINewSpreadsheetsprdWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(136, 162));
        }
        
        /// <summary>
        /// Makes suyre the name label is correct
        /// </summary>
        public void NameLabelB7()
        {
            #region Variable Declarations
            WinText uIB7Text = this.UINewSpreadsheetsprdWindow.UIA1Window.UIB7Text;
            #endregion

            // Verify that the 'Name' property of 'B7' label equals 'B7'
            Assert.AreEqual(this.NameLabelB7ExpectedValues.UIB7TextName, uIB7Text.Name);
        }
        
        /// <summary>
        /// CloseIt
        /// </summary>
        public void CloseIt()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UINewSpreadsheetsprdWindow.UINewSpreadsheetsprdTitleBar.UICloseButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(25, 5));
        }
        
        /// <summary>
        /// Plugs in a bunch of contents in C3, B4, C5.
        /// </summary>
        public void PlugInContents()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UINewSpreadsheetsprdWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIContentsBoxEdit = this.UINewSpreadsheetsprdWindow.UIContentsBoxWindow.UIContentsBoxEdit;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(203, 121));

            // Type '1' in 'ContentsBox' text box
            uIContentsBoxEdit.Text = this.PlugInContentsParams.UIContentsBoxEditText;

            // Type '{Enter}' in 'ContentsBox' text box
            Keyboard.SendKeys(uIContentsBoxEdit, this.PlugInContentsParams.UIContentsBoxEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(161, 99));

            // Type 'Hello' in 'ContentsBox' text box
            uIContentsBoxEdit.Text = this.PlugInContentsParams.UIContentsBoxEditText1;

            // Type '{Enter}' in 'ContentsBox' text box
            Keyboard.SendKeys(uIContentsBoxEdit, this.PlugInContentsParams.UIContentsBoxEditSendKeys1, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(217, 76));

            // Type '=C5+1' in 'ContentsBox' text box
            uIContentsBoxEdit.Text = this.PlugInContentsParams.UIContentsBoxEditText2;

            // Type '{Enter}' in 'ContentsBox' text box
            Keyboard.SendKeys(uIContentsBoxEdit, this.PlugInContentsParams.UIContentsBoxEditSendKeys2, ModifierKeys.None);
        }
        
        /// <summary>
        /// CheckC3Value2 - Use 'CheckC3Value2ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckC3Value2()
        {
            #region Variable Declarations
            WinText uIItem2Text = this.UINewSpreadsheetsprdWindow.UIHelloWindow.UIItem2Text;
            #endregion

            // Verify that the 'Name' property of '2' label equals '2'
            Assert.AreEqual(this.CheckC3Value2ExpectedValues.UIItem2TextName, uIItem2Text.Name);
        }
        
        /// <summary>
        /// SelectB4
        /// </summary>
        public void SelectB4()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UINewSpreadsheetsprdWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(145, 101));
        }
        
        /// <summary>
        /// CheckB4ValueHello - Use 'CheckB4ValueHelloExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckB4ValueHello()
        {
            #region Variable Declarations
            WinText uIHelloText = this.UINewSpreadsheetsprdWindow.UIHelloWindow.UIHelloText;
            #endregion

            // Verify that the 'Name' property of 'Hello' label equals 'Hello'
            Assert.AreEqual(this.CheckB4ValueHelloExpectedValues.UIHelloTextName, uIHelloText.Name);
        }
        
        /// <summary>
        /// SelectC5
        /// </summary>
        public void SelectC5()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UINewSpreadsheetsprdWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(240, 125));
        }
        
        /// <summary>
        /// CheckC5Value1 - Use 'CheckC5Value1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckC5Value1()
        {
            #region Variable Declarations
            WinText uIItem1Text = this.UINewSpreadsheetsprdWindow.UIHelloWindow.UIItem1Text;
            #endregion

            // Verify that the 'Name' property of '1' label equals '1'
            Assert.AreEqual(this.CheckC5Value1ExpectedValues.UIItem1TextName, uIItem1Text.Name);
        }
        
        /// <summary>
        /// SelectE11
        /// </summary>
        public void SelectE11()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UINewSpreadsheetsprdWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(361, 237));
        }
        
        /// <summary>
        /// Makes sure the namelabel changes
        /// </summary>
        public void AssertMethod1()
        {
            #region Variable Declarations
            WinText uIE11Text = this.UINewSpreadsheetsprdWindow.UIA1Window.UIE11Text;
            #endregion

            // Verify that the 'Name' property of 'E11' label equals 'E11'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UIE11TextName, uIE11Text.Name, "E11 not selected");
        }
        
        /// <summary>
        /// CloseWindow
        /// </summary>
        public void CloseWindow()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UINewSpreadsheetsprdWindow.UINewSpreadsheetsprdTitleBar.UICloseButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(13, 7));
        }
        
        /// <summary>
        /// entered contents into a few cells
        /// </summary>
        public void EnterSomeContents()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UINewSpreadsheetsprdWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIContentsBoxEdit = this.UINewSpreadsheetsprdWindow.UIContentsBoxWindow.UIContentsBoxEdit;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(43, 66));

            // Type 'Hello' in 'ContentsBox' text box
            uIContentsBoxEdit.Text = this.EnterSomeContentsParams.UIContentsBoxEditText;

            // Type '{Enter}' in 'ContentsBox' text box
            Keyboard.SendKeys(uIContentsBoxEdit, this.EnterSomeContentsParams.UIContentsBoxEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(222, 64));

            // Type '5' in 'ContentsBox' text box
            uIContentsBoxEdit.Text = this.EnterSomeContentsParams.UIContentsBoxEditText1;

            // Type '{Enter}' in 'ContentsBox' text box
            Keyboard.SendKeys(uIContentsBoxEdit, this.EnterSomeContentsParams.UIContentsBoxEditSendKeys1, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(129, 97));

            // Type '=C2+2' in 'ContentsBox' text box
            uIContentsBoxEdit.Text = this.EnterSomeContentsParams.UIContentsBoxEditText2;

            // Type '{Enter}' in 'ContentsBox' text box
            Keyboard.SendKeys(uIContentsBoxEdit, this.EnterSomeContentsParams.UIContentsBoxEditSendKeys2, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(78, 58));
        }
        
        /// <summary>
        /// Makes sure Contents of A2 is Hello
        /// </summary>
        public void A2IsHello()
        {
            #region Variable Declarations
            WinEdit uIContentsBoxEdit = this.UINewSpreadsheetsprdWindow.UIContentsBoxWindow.UIContentsBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'ContentsBox' text box equals 'Hello'
            Assert.AreEqual(this.A2IsHelloExpectedValues.UIContentsBoxEditText, uIContentsBoxEdit.Text, "Should say \"Hello\"");
        }
        
        /// <summary>
        /// SelectC2
        /// </summary>
        public void SelectC2()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UINewSpreadsheetsprdWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(244, 57));
        }
        
        /// <summary>
        /// Selects Cell C2
        /// </summary>
        public void SelectCellC2()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UINewSpreadsheetsprdWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(244, 57));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(221, 59));
        }
        
        /// <summary>
        /// contnets box should have 5
        /// </summary>
        public void CheckContentsOfC2()
        {
            #region Variable Declarations
            WinEdit uIContentsBoxEdit = this.UINewSpreadsheetsprdWindow.UIContentsBoxWindow.UIContentsBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'ContentsBox' text box equals '5'
            Assert.AreEqual(this.CheckContentsOfC2ExpectedValues.UIContentsBoxEditText, uIContentsBoxEdit.Text, "should be 5");
        }
        
        /// <summary>
        /// Selects B4
        /// </summary>
        public void SelectCellB4()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UINewSpreadsheetsprdWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(120, 101));
        }
        
        /// <summary>
        /// Makjes sure the contents of B4 is =C2+2
        /// </summary>
        public void CheckContentsOfB4()
        {
            #region Variable Declarations
            WinEdit uIContentsBoxEdit = this.UINewSpreadsheetsprdWindow.UIContentsBoxWindow.UIContentsBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'ContentsBox' text box equals '=C2+2'
            Assert.AreEqual(this.CheckContentsOfB4ExpectedValues.UIContentsBoxEditText, uIContentsBoxEdit.Text, "This should be a formula");
        }
        
        /// <summary>
        /// closes out th eprogram
        /// </summary>
        public void Closeout()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UINewSpreadsheetsprdWindow.UINewSpreadsheetsprdTitleBar.UICloseButton;
            WinButton uINOButton = this.UIThereareunsavedchangWindow.UINOWindow.UINOButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(13, 10));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(13, 12));
        }
        
        /// <summary>
        /// Creates a circular dependecy
        /// </summary>
        public void CreateCircularDependency()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UINewSpreadsheetsprdWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIContentsBoxEdit = this.UINewSpreadsheetsprdWindow.UIContentsBoxWindow.UIContentsBoxEdit;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(72, 43));

            // Type '1' in 'ContentsBox' text box
            uIContentsBoxEdit.Text = this.CreateCircularDependencyParams.UIContentsBoxEditText;

            // Type '{Enter}' in 'ContentsBox' text box
            Keyboard.SendKeys(uIContentsBoxEdit, this.CreateCircularDependencyParams.UIContentsBoxEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(73, 65));

            // Type '=A1' in 'ContentsBox' text box
            uIContentsBoxEdit.Text = this.CreateCircularDependencyParams.UIContentsBoxEditText1;

            // Type '{Enter}' in 'ContentsBox' text box
            Keyboard.SendKeys(uIContentsBoxEdit, this.CreateCircularDependencyParams.UIContentsBoxEditSendKeys1, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(75, 75));

            // Type '=A2' in 'ContentsBox' text box
            uIContentsBoxEdit.Text = this.CreateCircularDependencyParams.UIContentsBoxEditText2;

            // Type '{Enter}' in 'ContentsBox' text box
            Keyboard.SendKeys(uIContentsBoxEdit, this.CreateCircularDependencyParams.UIContentsBoxEditSendKeys2, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(75, 45));

            // Type '=A3' in 'ContentsBox' text box
            uIContentsBoxEdit.Text = this.CreateCircularDependencyParams.UIContentsBoxEditText3;

            // Type '{Enter}' in 'ContentsBox' text box
            Keyboard.SendKeys(uIContentsBoxEdit, this.CreateCircularDependencyParams.UIContentsBoxEditSendKeys3, ModifierKeys.None);
        }
        
        /// <summary>
        /// Checks to make sure the circular dependency error message is displayed
        /// </summary>
        public void CheckSCircDepErrorMessage()
        {
            #region Variable Declarations
            WinText uITheenteredformulacreText = this.UITheenteredformulacreWindow.UITheenteredformulacreText;
            #endregion

            // Verify that the 'Name' property of 'The entered formula creates a circular dependency....' label equals 'The entered formula creates a circular dependency.  Make sure your formula does not depend on the cell it is in.'
            Assert.AreEqual(this.CheckSCircDepErrorMessageExpectedValues.UITheenteredformulacreTextName, uITheenteredformulacreText.Name, "Error message is not correct");
        }
        
        /// <summary>
        /// closes the application
        /// </summary>
        public void Close()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            WinButton uICloseButton = this.UINewSpreadsheetsprdWindow.UINewSpreadsheetsprdTitleBar.UICloseButton;
            WinButton uINOButton = this.UIThereareunsavedchangWindow.UINOWindow.UINOButton;
            #endregion

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(56, 1));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(25, 7));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(64, 14));
        }
        
        /// <summary>
        /// Creates a formula that doesn't make sense.
        /// </summary>
        public void CreateFormulaProblems()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UINewSpreadsheetsprdWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIContentsBoxEdit = this.UINewSpreadsheetsprdWindow.UIContentsBoxWindow.UIContentsBoxEdit;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(127, 65));

            // Type '=A1A1A1' in 'ContentsBox' text box
            uIContentsBoxEdit.Text = this.CreateFormulaProblemsParams.UIContentsBoxEditText;

            // Type '{Enter}' in 'ContentsBox' text box
            Keyboard.SendKeys(uIContentsBoxEdit, this.CreateFormulaProblemsParams.UIContentsBoxEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// Checks to make sure an error is displayed when a faulty formula is inputted.
        /// </summary>
        public void CheckErrorMessageForFormulaProblems()
        {
            #region Variable Declarations
            WinControl uIItemDialog = this.UICodeMeterCCWindow.UIItemWindow.UIItemDialog;
            #endregion

            // Verify that the 'ControlType' property of Dialog equals 'Dialog'
            Assert.AreEqual(this.CheckErrorMessageForFormulaProblemsExpectedValues.UIItemDialogControlType, uIItemDialog.ControlType.ToString(), "It opens an error message");
        }
        
        /// <summary>
        /// CloseItAgain
        /// </summary>
        public void CloseItAgain()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            WinButton uICloseButton = this.UINewSpreadsheetsprdWindow.UINewSpreadsheetsprdTitleBar.UICloseButton;
            #endregion

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(7, 16));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(20, 12));
        }
        
        /// <summary>
        /// Tabbed over a few times.
        /// </summary>
        public void TabbedSome()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UINewSpreadsheetsprdWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIContentsBoxEdit = this.UINewSpreadsheetsprdWindow.UIContentsBoxWindow.UIContentsBoxEdit;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(81, 45));

            // Type '{Tab}{Tab}{Tab}' in 'ContentsBox' text box
            Keyboard.SendKeys(uIContentsBoxEdit, this.TabbedSomeParams.UIContentsBoxEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// Makes sure the selection is on D1.  this means that tab has moved over the selection.
        /// </summary>
        public void CheckSelection()
        {
            #region Variable Declarations
            WinText uID1Text = this.UINewSpreadsheetsprdWindow.UIA1Window.UID1Text;
            #endregion

            // Verify that the 'Name' property of 'D1' label equals 'D1'
            Assert.AreEqual(this.CheckSelectionExpectedValues.UID1TextName, uID1Text.Name);
        }
        
        /// <summary>
        /// closes the application
        /// </summary>
        public void CloseItout()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UINewSpreadsheetsprdWindow.UINewSpreadsheetsprdTitleBar.UICloseButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(27, 10));
        }
        
        /// <summary>
        /// Makes a selection and uses shift tab to go back
        /// </summary>
        public void MakeSelectionAndShiftTabBack()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UINewSpreadsheetsprdWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIContentsBoxEdit = this.UINewSpreadsheetsprdWindow.UIContentsBoxWindow.UIContentsBoxEdit;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(341, 133));

            // Type 'Shift + {Tab}' in 'ContentsBox' text box
            Keyboard.SendKeys(uIContentsBoxEdit, this.MakeSelectionAndShiftTabBackParams.UIContentsBoxEditSendKeys, ModifierKeys.Shift);

            // Type 'Shift + {Tab}' in 'ContentsBox' text box
            Keyboard.SendKeys(uIContentsBoxEdit, this.MakeSelectionAndShiftTabBackParams.UIContentsBoxEditSendKeys1, ModifierKeys.Shift);

            // Type 'Shift + {Tab}' in 'ContentsBox' text box
            Keyboard.SendKeys(uIContentsBoxEdit, this.MakeSelectionAndShiftTabBackParams.UIContentsBoxEditSendKeys2, ModifierKeys.Shift);
        }
        
        /// <summary>
        /// Makes sure the shift tab sends the selection back to A6.
        /// </summary>
        public void ShiftTabCheck()
        {
            #region Variable Declarations
            WinText uIA6Text = this.UINewSpreadsheetsprdWindow.UIA1Window.UIA6Text;
            #endregion

            // Verify that the 'Name' property of 'A6' label equals 'A6'
            Assert.AreEqual(this.ShiftTabCheckExpectedValues.UIA6TextName, uIA6Text.Name);
        }
        
        /// <summary>
        /// Changes cell value in A1 and attempts to save, triggering the safety feature.
        /// </summary>
        public void CloseFromMenueWithChanges()
        {
            #region Variable Declarations
            WinListItem uISpreadsheetGUIShortcListItem = this.UIProgramManagerWindow.UIDesktopList.UISpreadsheetGUIShortcListItem;
            WinButton uIOpenButton = this.UIOpenFileSecurityWarnWindow.UIOpenWindow.UIOpenButton;
            WinEdit uIContentsBoxEdit = this.UINewSpreadsheetsprdWindow.UIContentsBoxWindow.UIContentsBoxEdit;
            WinMenuItem uICloseMenuItem = this.UINewSpreadsheetsprdWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UICloseMenuItem;
            #endregion

            // Double-Click 'SpreadsheetGUI - Shortcut' list item
            Mouse.DoubleClick(uISpreadsheetGUIShortcListItem, new Point(32, 32));

            // Click '&Open' button
            Mouse.Click(uIOpenButton, new Point(44, 13));

            // Click '&Open' button
            Mouse.Click(uIOpenButton, new Point(53, 16));

            // Type 'hello' in 'ContentsBox' text box
            uIContentsBoxEdit.Text = this.CloseFromMenueWithChangesParams.UIContentsBoxEditText;

            // Type '{Enter}' in 'ContentsBox' text box
            Keyboard.SendKeys(uIContentsBoxEdit, this.CloseFromMenueWithChangesParams.UIContentsBoxEditSendKeys, ModifierKeys.None);

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem, new Point(52, 13));
        }
        
        /// <summary>
        /// Changes spreadsheet and attempts to close from menu.
        /// </summary>
        public void TriggerSafetyFromMenu()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UINewSpreadsheetsprdWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIContentsBoxEdit = this.UINewSpreadsheetsprdWindow.UIContentsBoxWindow.UIContentsBoxEdit;
            WinMenuItem uICloseMenuItem = this.UINewSpreadsheetsprdWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UICloseMenuItem;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(62, 40));

            // Type 'Hello' in 'ContentsBox' text box
            uIContentsBoxEdit.Text = this.TriggerSafetyFromMenuParams.UIContentsBoxEditText;

            // Type '{Enter}' in 'ContentsBox' text box
            Keyboard.SendKeys(uIContentsBoxEdit, this.TriggerSafetyFromMenuParams.UIContentsBoxEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(161, 58));

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem, new Point(56, 6));
        }
        
        /// <summary>
        /// Makes sure the user is asked to save.
        /// </summary>
        public void AssertSafetyFeatureTriggered()
        {
            #region Variable Declarations
            WinTitleBar uIThereareunsavedchangTitleBar = this.UIThereareunsavedchangWindow.UIThereareunsavedchangTitleBar;
            #endregion

            // Verify that the 'DisplayText' property of 'There are unsaved changes.' title bar equals 'There are unsaved changes.'
            Assert.AreEqual(this.AssertSafetyFeatureTriggeredExpectedValues.UIThereareunsavedchangTitleBarDisplayText, uIThereareunsavedchangTitleBar.DisplayText, "Safety Feature not triggered.");
        }
        
        /// <summary>
        /// Changes Spreadsheet and attempts to close from X button
        /// </summary>
        public void TriggerSafetyFromX()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UINewSpreadsheetsprdWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIContentsBoxEdit = this.UINewSpreadsheetsprdWindow.UIContentsBoxWindow.UIContentsBoxEdit;
            WinButton uICloseButton = this.UINewSpreadsheetsprdWindow.UINewSpreadsheetsprdTitleBar.UICloseButton;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(78, 43));

            // Type 'Hello' in 'ContentsBox' text box
            uIContentsBoxEdit.Text = this.TriggerSafetyFromXParams.UIContentsBoxEditText;

            // Type '{Enter}' in 'ContentsBox' text box
            Keyboard.SendKeys(uIContentsBoxEdit, this.TriggerSafetyFromXParams.UIContentsBoxEditSendKeys, ModifierKeys.None);

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(26, 18));
        }
        
        /// <summary>
        /// Chooses to save from the safety feature.
        /// </summary>
        public void ChooseToSave()
        {
            #region Variable Declarations
            WinButton uIYesButton = this.UIThereareunsavedchangWindow.UIYesWindow.UIYesButton;
            #endregion

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(46, 15));
        }
        
        /// <summary>
        /// Makes sure the user is prompted to save when they choose to save.
        /// </summary>
        public void AssertSavePrompted()
        {
            #region Variable Declarations
            WinTitleBar uISaveTitleBar = this.UISaveWindow.UISaveTitleBar;
            #endregion

            // Verify that the 'DisplayText' property of 'Save' title bar equals 'Save'
            Assert.AreEqual(this.AssertSavePromptedExpectedValues.UISaveTitleBarDisplayText, uISaveTitleBar.DisplayText, "Safety feature not prompted.");
        }
        
        /// <summary>
        /// Chooses to save when asked by safety feature.
        /// </summary>
        public void ChooseToSaveFromMenu()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UINewSpreadsheetsprdWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIContentsBoxEdit = this.UINewSpreadsheetsprdWindow.UIContentsBoxWindow.UIContentsBoxEdit;
            WinMenuItem uICloseMenuItem = this.UINewSpreadsheetsprdWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UICloseMenuItem;
            WinButton uIYesButton = this.UIThereareunsavedchangWindow.UIYesWindow.UIYesButton;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(136, 60));

            // Type 'Changed' in 'ContentsBox' text box
            uIContentsBoxEdit.Text = this.ChooseToSaveFromMenuParams.UIContentsBoxEditText;

            // Type '{Enter}' in 'ContentsBox' text box
            Keyboard.SendKeys(uIContentsBoxEdit, this.ChooseToSaveFromMenuParams.UIContentsBoxEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(208, 54));

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem, new Point(58, 11));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(47, 12));
        }
        
        /// <summary>
        /// Asserts that the user is prompted to save when they request.
        /// </summary>
        public void AssertSavePromptedFromMenu()
        {
            #region Variable Declarations
            WinTitleBar uISaveTitleBar = this.UISaveWindow.UISaveTitleBar;
            #endregion

            // Verify that the 'DisplayText' property of 'Save' title bar equals 'Save'
            Assert.AreEqual(this.AssertSavePromptedFromMenuExpectedValues.UISaveTitleBarDisplayText, uISaveTitleBar.DisplayText, "User was not prompted to save.");
        }
        
        /// <summary>
        /// Cancels the save prompt.
        /// </summary>
        public void CancelSavePrompt()
        {
            #region Variable Declarations
            WinButton uICancelButton = this.UISaveWindow.UICancelWindow.UICancelButton;
            #endregion

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(25, 12));
        }
        
        /// <summary>
        /// Chooses to save when prompeted after clicking X button.
        /// </summary>
        public void ChooseToSaveFromXButton()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UINewSpreadsheetsprdWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIContentsBoxEdit = this.UINewSpreadsheetsprdWindow.UIContentsBoxWindow.UIContentsBoxEdit;
            WinButton uICloseButton = this.UINewSpreadsheetsprdWindow.UINewSpreadsheetsprdTitleBar.UICloseButton;
            WinButton uIYesButton = this.UIThereareunsavedchangWindow.UIYesWindow.UIYesButton;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(142, 53));

            // Type 'changed' in 'ContentsBox' text box
            uIContentsBoxEdit.Text = this.ChooseToSaveFromXButtonParams.UIContentsBoxEditText;

            // Type '{Enter}{Enter}' in 'ContentsBox' text box
            Keyboard.SendKeys(uIContentsBoxEdit, this.ChooseToSaveFromXButtonParams.UIContentsBoxEditSendKeys, ModifierKeys.None);

            // Click 'ContentsBox' text box
            Mouse.Click(uIContentsBoxEdit, new Point(93, 4));

            // Type '{Enter}' in 'ContentsBox' text box
            Keyboard.SendKeys(uIContentsBoxEdit, this.ChooseToSaveFromXButtonParams.UIContentsBoxEditSendKeys1, ModifierKeys.None);

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(33, 15));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(49, 11));
        }
        
        /// <summary>
        /// Asserts that the user was prompted to save from safety feature.
        /// </summary>
        public void AssertSavePromptedFromXButton()
        {
            #region Variable Declarations
            WinTitleBar uISaveTitleBar = this.UISaveWindow.UISaveTitleBar;
            #endregion

            // Verify that the 'DisplayText' property of 'Save' title bar equals 'Save'
            Assert.AreEqual(this.AssertSavePromptedFromXButtonExpectedValues.UISaveTitleBarDisplayText, uISaveTitleBar.DisplayText, "User was not prompted to save.");
        }
        
        /// <summary>
        /// Cancels the save prompt.
        /// </summary>
        public void CancelSavePromptXButton()
        {
            #region Variable Declarations
            WinButton uICancelButton = this.UISaveWindow.UICancelWindow.UICancelButton;
            #endregion

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(31, 12));
        }
        
        /// <summary>
        /// Cancels the closing event originating fromt the X button.
        /// </summary>
        public void CancelFromXButton()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UINewSpreadsheetsprdWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIContentsBoxEdit = this.UINewSpreadsheetsprdWindow.UIContentsBoxWindow.UIContentsBoxEdit;
            WinButton uICloseButton = this.UINewSpreadsheetsprdWindow.UINewSpreadsheetsprdTitleBar.UICloseButton;
            WinButton uICancelButton = this.UIThereareunsavedchangWindow.UICancelWindow.UICancelButton;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(72, 44));

            // Type 'change' in 'ContentsBox' text box
            uIContentsBoxEdit.Text = this.CancelFromXButtonParams.UIContentsBoxEditText;

            // Type '{Enter}' in 'ContentsBox' text box
            Keyboard.SendKeys(uIContentsBoxEdit, this.CancelFromXButtonParams.UIContentsBoxEditSendKeys, ModifierKeys.None);

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(22, 17));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(33, 16));
        }
        
        /// <summary>
        /// Asserts that the same spreadsheet is still open.
        /// </summary>
        public void SameSpreadsheetOpenXButton()
        {
            #region Variable Declarations
            WinText uIChangedText = this.UINewSpreadsheetsprdWindow.UIHelloWindow.UIChangedText;
            #endregion

            // Verify that the 'Name' property of 'Changed' label equals 'Changed'
            Assert.AreEqual(this.SameSpreadsheetOpenXButtonExpectedValues.UIChangedTextName, uIChangedText.Name, "Spreadsheet not kept open after safety feature canceled.");
        }
        
        /// <summary>
        /// Triggers and cancels the safety feature from the menu option.
        /// </summary>
        public void CancelFromMenu()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UINewSpreadsheetsprdWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIContentsBoxEdit = this.UINewSpreadsheetsprdWindow.UIContentsBoxWindow.UIContentsBoxEdit;
            WinMenuItem uICloseMenuItem = this.UINewSpreadsheetsprdWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UICloseMenuItem;
            WinButton uICancelButton = this.UIThereareunsavedchangWindow.UICancelWindow.UICancelButton;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(143, 78));

            // Type 'NewContent' in 'ContentsBox' text box
            uIContentsBoxEdit.Text = this.CancelFromMenuParams.UIContentsBoxEditText;

            // Type '{Enter}' in 'ContentsBox' text box
            Keyboard.SendKeys(uIContentsBoxEdit, this.CancelFromMenuParams.UIContentsBoxEditSendKeys, ModifierKeys.None);

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem, new Point(58, 4));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(60, 15));
        }
        
        /// <summary>
        /// Asserts that the same spreadsheet is open after canceling the closing event.
        /// </summary>
        public void SameSpreadsheetOpenMenu()
        {
            #region Variable Declarations
            WinText uINewContentText = this.UINewSpreadsheetsprdWindow.UIHelloWindow.UINewContentText;
            #endregion

            // Verify that the 'Name' property of 'NewContent' label equals 'NewContent'
            Assert.AreEqual(this.SameSpreadsheetOpenMenuExpectedValues.UINewContentTextName, uINewContentText.Name, "Spreadsheet not open after canceling safety feature.");
        }
        
        /// <summary>
        /// Declines option to save from safety feature.
        /// </summary>
        public void DeclineSaveXButton()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UINewSpreadsheetsprdWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIContentsBoxEdit = this.UINewSpreadsheetsprdWindow.UIContentsBoxWindow.UIContentsBoxEdit;
            WinButton uICloseButton = this.UINewSpreadsheetsprdWindow.UINewSpreadsheetsprdTitleBar.UICloseButton;
            WinButton uINOButton = this.UIThereareunsavedchangWindow.UINOWindow.UINOButton;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(175, 68));

            // Type 'Prompt Save' in 'ContentsBox' text box
            uIContentsBoxEdit.Text = this.DeclineSaveXButtonParams.UIContentsBoxEditText;

            // Type '{Enter}' in 'ContentsBox' text box
            Keyboard.SendKeys(uIContentsBoxEdit, this.DeclineSaveXButtonParams.UIContentsBoxEditSendKeys, ModifierKeys.None);

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(22, 20));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(56, 10));
        }
        
        /// <summary>
        /// Declines the option to save  after triggering safety feature with menu button.
        /// </summary>
        public void DeclineSaveMenu()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UINewSpreadsheetsprdWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIContentsBoxEdit = this.UINewSpreadsheetsprdWindow.UIContentsBoxWindow.UIContentsBoxEdit;
            WinMenuItem uICloseMenuItem = this.UINewSpreadsheetsprdWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UICloseMenuItem;
            WinButton uINOButton = this.UIThereareunsavedchangWindow.UINOWindow.UINOButton;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(231, 122));

            // Type 'prompt save' in 'ContentsBox' text box
            uIContentsBoxEdit.Text = this.DeclineSaveMenuParams.UIContentsBoxEditText;

            // Type '{Enter}' in 'ContentsBox' text box
            Keyboard.SendKeys(uIContentsBoxEdit, this.DeclineSaveMenuParams.UIContentsBoxEditSendKeys, ModifierKeys.None);

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem, new Point(54, 12));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(48, 16));
        }
        
        /// <summary>
        /// Selects the save option from the menu.
        /// </summary>
        public void SaveFromMenu()
        {
            #region Variable Declarations
            WinMenuItem uISaveMenuItem = this.UINewSpreadsheetsprdWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveMenuItem;
            #endregion

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(45, 6));
        }
        
        /// <summary>
        /// Save Prompted from menu.
        /// </summary>
        public void AssertSavePrompt()
        {
            #region Variable Declarations
            WinTitleBar uISaveTitleBar = this.UISaveWindow.UISaveTitleBar;
            #endregion

            // Verify that the 'DisplayText' property of 'Save' title bar equals 'Save'
            Assert.AreEqual(this.AssertSavePromptExpectedValues.UISaveTitleBarDisplayText, uISaveTitleBar.DisplayText, "Save not prompted when selected from menu.");
        }
        
        /// <summary>
        /// Cancels the save and exits program.
        /// </summary>
        public void CancelSaveAndExit()
        {
            #region Variable Declarations
            WinButton uICancelButton = this.UISaveWindow.UICancelWindow.UICancelButton;
            WinButton uICloseButton = this.UINewSpreadsheetsprdWindow.UINewSpreadsheetsprdTitleBar.UICloseButton;
            #endregion

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(40, 19));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(17, 19));
        }
        
        /// <summary>
        /// saves to "NewName.Sprd"
        /// </summary>
        public void SaveToNewName()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UINewSpreadsheetsprdWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIContentsBoxEdit = this.UINewSpreadsheetsprdWindow.UIContentsBoxWindow.UIContentsBoxEdit;
            WinMenuItem uISaveMenuItem = this.UINewSpreadsheetsprdWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveMenuItem;
            WinComboBox uIFilenameComboBox = this.UISaveWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinButton uISaveButton = this.UISaveWindow.UISaveWindow1.UISaveButton;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(83, 39));

            // Type 'data' in 'ContentsBox' text box
            uIContentsBoxEdit.Text = this.SaveToNewNameParams.UIContentsBoxEditText;

            // Type '{Enter}' in 'ContentsBox' text box
            Keyboard.SendKeys(uIContentsBoxEdit, this.SaveToNewNameParams.UIContentsBoxEditSendKeys, ModifierKeys.None);

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(55, 16));

            // Select 'NewName.sprd' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.SaveToNewNameParams.UIFilenameComboBoxEditableItem;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(57, 9));
        }
        
        /// <summary>
        /// Asserts the spreadsheet was saved to a new file name.
        /// </summary>
        public void AssertNewName()
        {
            #region Variable Declarations
            WinTitleBar uICUsersmarcheseSourceTitleBar = this.UICUsersmarcheseSourceWindow.UICUsersmarcheseSourceTitleBar;
            #endregion

            // Verify that the 'DisplayText' property of 'C:\Users\marchese\Source\Repos\CS3500_Tim_CoS\PS4\...' title bar is not equal to 'NewSpreadsheet.sprd'
            Assert.AreNotEqual(this.AssertNewNameExpectedValues.UICUsersmarcheseSourceTitleBarDisplayText, uICUsersmarcheseSourceTitleBar.DisplayText, "Spreadsheet not saved to new file name.");
        }
        
        /// <summary>
        /// Saves Changed spreadsheet and opens a blank one.
        /// </summary>
        public void SaveAndOpenNew()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UINewSpreadsheetsprdWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIContentsBoxEdit = this.UINewSpreadsheetsprdWindow.UIContentsBoxWindow.UIContentsBoxEdit;
            WinMenuItem uISaveMenuItem = this.UINewSpreadsheetsprdWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveMenuItem;
            WinComboBox uIFilenameComboBox = this.UISaveWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinButton uISaveButton = this.UISaveWindow.UISaveWindow1.UISaveButton;
            WinMenuItem uINewMenuItem = this.UINewSpreadsheetsprdWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UINewMenuItem;
            WinButton uICloseButton = this.UINewSpreadsheetsprdWindow.UINewSpreadsheetsprdTitleBar.UICloseButton;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(143, 84));

            // Type 'NonEmptyCell' in 'ContentsBox' text box
            uIContentsBoxEdit.Text = this.SaveAndOpenNewParams.UIContentsBoxEditText;

            // Type '{Enter}' in 'ContentsBox' text box
            Keyboard.SendKeys(uIContentsBoxEdit, this.SaveAndOpenNewParams.UIContentsBoxEditSendKeys, ModifierKeys.None);

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(53, 18));

            // Select 'ChangedSheet.sprd' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.SaveAndOpenNewParams.UIFilenameComboBoxEditableItem;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(55, 19));

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(37, 12));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(24, 20));
        }
        
        /// <summary>
        /// Opens the changed spreadsheet.
        /// </summary>
        public void OpenChanged()
        {
            #region Variable Declarations
            WinMenuItem uIOpenMenuItem = this.UINewSpreadsheetsprdWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinEdit uINameEdit = this.UIOpenaSpreadsheetWindow.UIItemWindow.UIChangedSheetsprdListItem.UINameEdit;
            WinSplitButton uIOpenSplitButton = this.UIOpenaSpreadsheetWindow.UIOpenWindow.UIOpenSplitButton;
            #endregion

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(42, 6));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(77, 15));

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton, new Point(50, 17));
        }
        
        /// <summary>
        /// Selects cell B3
        /// </summary>
        public void SelectB3()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UICUsersmarcheseSourceWindow1.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(147, 79));
        }
        
        /// <summary>
        /// Asserts the changed spreadsheet is loaded.
        /// </summary>
        public void AssertLoadedBack()
        {
            #region Variable Declarations
            WinText uINonEmptyCellText = this.UICUsersmarcheseSourceWindow1.UINonEmptyCellWindow.UINonEmptyCellText;
            #endregion

            // Verify that the 'Name' property of 'NonEmptyCell' label equals 'NonEmptyCell'
            Assert.AreEqual(this.AssertLoadedBackExpectedValues.UINonEmptyCellTextName, uINonEmptyCellText.Name, "Changed Spreadsheet not loaded.");
        }
        
        /// <summary>
        /// Saves spreadsheet as "NewName.sprd"
        /// </summary>
        public void SaveNewName()
        {
            #region Variable Declarations
            WinMenuItem uISaveMenuItem = this.UINewSpreadsheetsprdWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveMenuItem;
            WinComboBox uIFilenameComboBox = this.UISaveWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinButton uISaveButton = this.UISaveWindow.UISaveWindow1.UISaveButton;
            WinButton uIYesButton = this.UIConfirmSaveAsWindow.UIConfirmSaveAsPane.UIYesButton;
            #endregion

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(43, 10));

            // Select 'NewName.sprd' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.SaveNewNameParams.UIFilenameComboBoxEditableItem;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(42, 13));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(28, 12));
        }
        
        /// <summary>
        /// Asserts that the file name has changed after saving.
        /// </summary>
        public void CheckNewName()
        {
            #region Variable Declarations
            WinTitleBar uICUsersmarcheseSourceTitleBar = this.UICUsersmarcheseSourceWindow.UICUsersmarcheseSourceTitleBar;
            #endregion

            // Verify that the 'DisplayText' property of 'C:\Users\marchese\Source\Repos\CS3500_Tim_CoS\PS4\...' title bar is not equal to 'NewSpreadsheet.sprd'
            Assert.AreNotEqual(this.CheckNewNameExpectedValues.UICUsersmarcheseSourceTitleBarDisplayText, uICUsersmarcheseSourceTitleBar.DisplayText, "Spreadsheet not saved under a new name.");
        }
        
        /// <summary>
        /// Changes the spreadsheet , saves and exits. Spreadsheet should recognize all chnages as saved.
        /// </summary>
        public void ChangeSaveExit()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UINewSpreadsheetsprdWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIContentsBoxEdit = this.UINewSpreadsheetsprdWindow.UIContentsBoxWindow.UIContentsBoxEdit;
            WinMenuItem uISaveMenuItem = this.UINewSpreadsheetsprdWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveMenuItem;
            WinComboBox uIFilenameComboBox = this.UISaveWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinEdit uIFilenameEdit = this.UISaveWindow.UIItemWindow.UIFilenameEdit;
            WinButton uIYesButton = this.UIConfirmSaveAsWindow.UIConfirmSaveAsPane.UIYesButton;
            WinButton uICloseButton = this.UINewSpreadsheetsprdWindow.UINewSpreadsheetsprdTitleBar.UICloseButton;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(73, 36));

            // Type 'Changed' in 'ContentsBox' text box
            uIContentsBoxEdit.Text = this.ChangeSaveExitParams.UIContentsBoxEditText;

            // Type '{Enter}' in 'ContentsBox' text box
            Keyboard.SendKeys(uIContentsBoxEdit, this.ChangeSaveExitParams.UIContentsBoxEditSendKeys, ModifierKeys.None);

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(33, 6));

            // Select 'NewName.sprd' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.ChangeSaveExitParams.UIFilenameComboBoxEditableItem;

            // Type '{Enter}' in 'File name:' text box
            Keyboard.SendKeys(uIFilenameEdit, this.ChangeSaveExitParams.UIFilenameEditSendKeys, ModifierKeys.None);

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(35, 13));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(17, 18));
        }
        
        /// <summary>
        /// saves spreadsheet to "NewName.sprd"
        /// </summary>
        public void SaveChangedSpreadsheet()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UINewSpreadsheetsprdWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIContentsBoxEdit = this.UINewSpreadsheetsprdWindow.UIContentsBoxWindow.UIContentsBoxEdit;
            WinMenuItem uISaveMenuItem = this.UINewSpreadsheetsprdWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveMenuItem;
            WinComboBox uIFilenameComboBox = this.UISaveWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinButton uISaveButton = this.UISaveWindow.UISaveWindow1.UISaveButton;
            WinButton uIYesButton = this.UIConfirmSaveAsWindow.UIConfirmSaveAsPane.UIYesButton;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(93, 42));

            // Type 'Changed' in 'ContentsBox' text box
            uIContentsBoxEdit.Text = this.SaveChangedSpreadsheetParams.UIContentsBoxEditText;

            // Type '{Enter}' in 'ContentsBox' text box
            Keyboard.SendKeys(uIContentsBoxEdit, this.SaveChangedSpreadsheetParams.UIContentsBoxEditSendKeys, ModifierKeys.None);

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(46, 7));

            // Select 'NewName.sprd' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.SaveChangedSpreadsheetParams.UIFilenameComboBoxEditableItem;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(18, 5));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(32, 6));
        }
        
        /// <summary>
        /// Opens "NewName.sprd"
        /// </summary>
        public void LoadChangedSpreadsheet()
        {
            #region Variable Declarations
            WinMenuItem uIOpenMenuItem = this.UINewSpreadsheetsprdWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinEdit uINameEdit = this.UIOpenaSpreadsheetWindow.UIItemWindow.UINewNamesprdListItem.UINameEdit;
            WinSplitButton uIOpenSplitButton = this.UIOpenaSpreadsheetWindow.UIOpenWindow.UIOpenSplitButton;
            #endregion

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(39, 7));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(35, 14));

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton, new Point(45, 20));
        }
        
        /// <summary>
        /// Selects cell A1
        /// </summary>
        public void SelectA1()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UICUsersmarcheseSourceWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(84, 38));
        }
        
        /// <summary>
        /// Asserts that the changed spreadsheet was loaded.
        /// </summary>
        public void AssertOpenedChanged()
        {
            #region Variable Declarations
            WinText uIChangedText = this.UICUsersmarcheseSourceWindow.UIChangedWindow.UIChangedText;
            #endregion

            // Verify that the 'Name' property of 'Changed' label equals 'Changed'
            Assert.AreEqual(this.AssertOpenedChangedExpectedValues.UIChangedTextName, uIChangedText.Name, "Changed spreadsheet not opened properly.");
        }
        
        #region Properties
        public virtual OpenSpreadsheetParams OpenSpreadsheetParams
        {
            get
            {
                if ((this.mOpenSpreadsheetParams == null))
                {
                    this.mOpenSpreadsheetParams = new OpenSpreadsheetParams();
                }
                return this.mOpenSpreadsheetParams;
            }
        }
        
        public virtual EnterContentsParams EnterContentsParams
        {
            get
            {
                if ((this.mEnterContentsParams == null))
                {
                    this.mEnterContentsParams = new EnterContentsParams();
                }
                return this.mEnterContentsParams;
            }
        }
        
        public virtual UpdateCheckedByValueLabelExpectedValues UpdateCheckedByValueLabelExpectedValues
        {
            get
            {
                if ((this.mUpdateCheckedByValueLabelExpectedValues == null))
                {
                    this.mUpdateCheckedByValueLabelExpectedValues = new UpdateCheckedByValueLabelExpectedValues();
                }
                return this.mUpdateCheckedByValueLabelExpectedValues;
            }
        }
        
        public virtual CheckFocusA1ExpectedValues CheckFocusA1ExpectedValues
        {
            get
            {
                if ((this.mCheckFocusA1ExpectedValues == null))
                {
                    this.mCheckFocusA1ExpectedValues = new CheckFocusA1ExpectedValues();
                }
                return this.mCheckFocusA1ExpectedValues;
            }
        }
        
        public virtual CheckContentBoxExpectedValues CheckContentBoxExpectedValues
        {
            get
            {
                if ((this.mCheckContentBoxExpectedValues == null))
                {
                    this.mCheckContentBoxExpectedValues = new CheckContentBoxExpectedValues();
                }
                return this.mCheckContentBoxExpectedValues;
            }
        }
        
        public virtual OverwriteA1Params OverwriteA1Params
        {
            get
            {
                if ((this.mOverwriteA1Params == null))
                {
                    this.mOverwriteA1Params = new OverwriteA1Params();
                }
                return this.mOverwriteA1Params;
            }
        }
        
        public virtual CheckOverwirteWorkedExpectedValues CheckOverwirteWorkedExpectedValues
        {
            get
            {
                if ((this.mCheckOverwirteWorkedExpectedValues == null))
                {
                    this.mCheckOverwirteWorkedExpectedValues = new CheckOverwirteWorkedExpectedValues();
                }
                return this.mCheckOverwirteWorkedExpectedValues;
            }
        }
        
        public virtual CheckEmptyContentsOnSecondSpreadsheetExpectedValues CheckEmptyContentsOnSecondSpreadsheetExpectedValues
        {
            get
            {
                if ((this.mCheckEmptyContentsOnSecondSpreadsheetExpectedValues == null))
                {
                    this.mCheckEmptyContentsOnSecondSpreadsheetExpectedValues = new CheckEmptyContentsOnSecondSpreadsheetExpectedValues();
                }
                return this.mCheckEmptyContentsOnSecondSpreadsheetExpectedValues;
            }
        }
        
        public virtual InputInSS1AndOpenSS2Params InputInSS1AndOpenSS2Params
        {
            get
            {
                if ((this.mInputInSS1AndOpenSS2Params == null))
                {
                    this.mInputInSS1AndOpenSS2Params = new InputInSS1AndOpenSS2Params();
                }
                return this.mInputInSS1AndOpenSS2Params;
            }
        }
        
        public virtual CheckContentsOfOldAndNewSSExpectedValues CheckContentsOfOldAndNewSSExpectedValues
        {
            get
            {
                if ((this.mCheckContentsOfOldAndNewSSExpectedValues == null))
                {
                    this.mCheckContentsOfOldAndNewSSExpectedValues = new CheckContentsOfOldAndNewSSExpectedValues();
                }
                return this.mCheckContentsOfOldAndNewSSExpectedValues;
            }
        }
        
        public virtual OpenSecondSSAndEnterValuesParams OpenSecondSSAndEnterValuesParams
        {
            get
            {
                if ((this.mOpenSecondSSAndEnterValuesParams == null))
                {
                    this.mOpenSecondSSAndEnterValuesParams = new OpenSecondSSAndEnterValuesParams();
                }
                return this.mOpenSecondSSAndEnterValuesParams;
            }
        }
        
        public virtual CheckSS1B2AndSS2A1ExpectedValues CheckSS1B2AndSS2A1ExpectedValues
        {
            get
            {
                if ((this.mCheckSS1B2AndSS2A1ExpectedValues == null))
                {
                    this.mCheckSS1B2AndSS2A1ExpectedValues = new CheckSS1B2AndSS2A1ExpectedValues();
                }
                return this.mCheckSS1B2AndSS2A1ExpectedValues;
            }
        }
        
        public virtual SecondWindowExistsExpectedValues SecondWindowExistsExpectedValues
        {
            get
            {
                if ((this.mSecondWindowExistsExpectedValues == null))
                {
                    this.mSecondWindowExistsExpectedValues = new SecondWindowExistsExpectedValues();
                }
                return this.mSecondWindowExistsExpectedValues;
            }
        }
        
        public virtual CheckHelpTextExpectedValues CheckHelpTextExpectedValues
        {
            get
            {
                if ((this.mCheckHelpTextExpectedValues == null))
                {
                    this.mCheckHelpTextExpectedValues = new CheckHelpTextExpectedValues();
                }
                return this.mCheckHelpTextExpectedValues;
            }
        }
        
        public virtual NameLabelB2ExpectedValues NameLabelB2ExpectedValues
        {
            get
            {
                if ((this.mNameLabelB2ExpectedValues == null))
                {
                    this.mNameLabelB2ExpectedValues = new NameLabelB2ExpectedValues();
                }
                return this.mNameLabelB2ExpectedValues;
            }
        }
        
        public virtual NameLabelB7ExpectedValues NameLabelB7ExpectedValues
        {
            get
            {
                if ((this.mNameLabelB7ExpectedValues == null))
                {
                    this.mNameLabelB7ExpectedValues = new NameLabelB7ExpectedValues();
                }
                return this.mNameLabelB7ExpectedValues;
            }
        }
        
        public virtual PlugInContentsParams PlugInContentsParams
        {
            get
            {
                if ((this.mPlugInContentsParams == null))
                {
                    this.mPlugInContentsParams = new PlugInContentsParams();
                }
                return this.mPlugInContentsParams;
            }
        }
        
        public virtual CheckC3Value2ExpectedValues CheckC3Value2ExpectedValues
        {
            get
            {
                if ((this.mCheckC3Value2ExpectedValues == null))
                {
                    this.mCheckC3Value2ExpectedValues = new CheckC3Value2ExpectedValues();
                }
                return this.mCheckC3Value2ExpectedValues;
            }
        }
        
        public virtual CheckB4ValueHelloExpectedValues CheckB4ValueHelloExpectedValues
        {
            get
            {
                if ((this.mCheckB4ValueHelloExpectedValues == null))
                {
                    this.mCheckB4ValueHelloExpectedValues = new CheckB4ValueHelloExpectedValues();
                }
                return this.mCheckB4ValueHelloExpectedValues;
            }
        }
        
        public virtual CheckC5Value1ExpectedValues CheckC5Value1ExpectedValues
        {
            get
            {
                if ((this.mCheckC5Value1ExpectedValues == null))
                {
                    this.mCheckC5Value1ExpectedValues = new CheckC5Value1ExpectedValues();
                }
                return this.mCheckC5Value1ExpectedValues;
            }
        }
        
        public virtual AssertMethod1ExpectedValues AssertMethod1ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod1ExpectedValues == null))
                {
                    this.mAssertMethod1ExpectedValues = new AssertMethod1ExpectedValues();
                }
                return this.mAssertMethod1ExpectedValues;
            }
        }
        
        public virtual EnterSomeContentsParams EnterSomeContentsParams
        {
            get
            {
                if ((this.mEnterSomeContentsParams == null))
                {
                    this.mEnterSomeContentsParams = new EnterSomeContentsParams();
                }
                return this.mEnterSomeContentsParams;
            }
        }
        
        public virtual A2IsHelloExpectedValues A2IsHelloExpectedValues
        {
            get
            {
                if ((this.mA2IsHelloExpectedValues == null))
                {
                    this.mA2IsHelloExpectedValues = new A2IsHelloExpectedValues();
                }
                return this.mA2IsHelloExpectedValues;
            }
        }
        
        public virtual CheckContentsOfC2ExpectedValues CheckContentsOfC2ExpectedValues
        {
            get
            {
                if ((this.mCheckContentsOfC2ExpectedValues == null))
                {
                    this.mCheckContentsOfC2ExpectedValues = new CheckContentsOfC2ExpectedValues();
                }
                return this.mCheckContentsOfC2ExpectedValues;
            }
        }
        
        public virtual CheckContentsOfB4ExpectedValues CheckContentsOfB4ExpectedValues
        {
            get
            {
                if ((this.mCheckContentsOfB4ExpectedValues == null))
                {
                    this.mCheckContentsOfB4ExpectedValues = new CheckContentsOfB4ExpectedValues();
                }
                return this.mCheckContentsOfB4ExpectedValues;
            }
        }
        
        public virtual CreateCircularDependencyParams CreateCircularDependencyParams
        {
            get
            {
                if ((this.mCreateCircularDependencyParams == null))
                {
                    this.mCreateCircularDependencyParams = new CreateCircularDependencyParams();
                }
                return this.mCreateCircularDependencyParams;
            }
        }
        
        public virtual CheckSCircDepErrorMessageExpectedValues CheckSCircDepErrorMessageExpectedValues
        {
            get
            {
                if ((this.mCheckSCircDepErrorMessageExpectedValues == null))
                {
                    this.mCheckSCircDepErrorMessageExpectedValues = new CheckSCircDepErrorMessageExpectedValues();
                }
                return this.mCheckSCircDepErrorMessageExpectedValues;
            }
        }
        
        public virtual CreateFormulaProblemsParams CreateFormulaProblemsParams
        {
            get
            {
                if ((this.mCreateFormulaProblemsParams == null))
                {
                    this.mCreateFormulaProblemsParams = new CreateFormulaProblemsParams();
                }
                return this.mCreateFormulaProblemsParams;
            }
        }
        
        public virtual CheckErrorMessageForFormulaProblemsExpectedValues CheckErrorMessageForFormulaProblemsExpectedValues
        {
            get
            {
                if ((this.mCheckErrorMessageForFormulaProblemsExpectedValues == null))
                {
                    this.mCheckErrorMessageForFormulaProblemsExpectedValues = new CheckErrorMessageForFormulaProblemsExpectedValues();
                }
                return this.mCheckErrorMessageForFormulaProblemsExpectedValues;
            }
        }
        
        public virtual TabbedSomeParams TabbedSomeParams
        {
            get
            {
                if ((this.mTabbedSomeParams == null))
                {
                    this.mTabbedSomeParams = new TabbedSomeParams();
                }
                return this.mTabbedSomeParams;
            }
        }
        
        public virtual CheckSelectionExpectedValues CheckSelectionExpectedValues
        {
            get
            {
                if ((this.mCheckSelectionExpectedValues == null))
                {
                    this.mCheckSelectionExpectedValues = new CheckSelectionExpectedValues();
                }
                return this.mCheckSelectionExpectedValues;
            }
        }
        
        public virtual MakeSelectionAndShiftTabBackParams MakeSelectionAndShiftTabBackParams
        {
            get
            {
                if ((this.mMakeSelectionAndShiftTabBackParams == null))
                {
                    this.mMakeSelectionAndShiftTabBackParams = new MakeSelectionAndShiftTabBackParams();
                }
                return this.mMakeSelectionAndShiftTabBackParams;
            }
        }
        
        public virtual ShiftTabCheckExpectedValues ShiftTabCheckExpectedValues
        {
            get
            {
                if ((this.mShiftTabCheckExpectedValues == null))
                {
                    this.mShiftTabCheckExpectedValues = new ShiftTabCheckExpectedValues();
                }
                return this.mShiftTabCheckExpectedValues;
            }
        }
        
        public virtual CloseFromMenueWithChangesParams CloseFromMenueWithChangesParams
        {
            get
            {
                if ((this.mCloseFromMenueWithChangesParams == null))
                {
                    this.mCloseFromMenueWithChangesParams = new CloseFromMenueWithChangesParams();
                }
                return this.mCloseFromMenueWithChangesParams;
            }
        }
        
        public virtual TriggerSafetyFromMenuParams TriggerSafetyFromMenuParams
        {
            get
            {
                if ((this.mTriggerSafetyFromMenuParams == null))
                {
                    this.mTriggerSafetyFromMenuParams = new TriggerSafetyFromMenuParams();
                }
                return this.mTriggerSafetyFromMenuParams;
            }
        }
        
        public virtual AssertSafetyFeatureTriggeredExpectedValues AssertSafetyFeatureTriggeredExpectedValues
        {
            get
            {
                if ((this.mAssertSafetyFeatureTriggeredExpectedValues == null))
                {
                    this.mAssertSafetyFeatureTriggeredExpectedValues = new AssertSafetyFeatureTriggeredExpectedValues();
                }
                return this.mAssertSafetyFeatureTriggeredExpectedValues;
            }
        }
        
        public virtual TriggerSafetyFromXParams TriggerSafetyFromXParams
        {
            get
            {
                if ((this.mTriggerSafetyFromXParams == null))
                {
                    this.mTriggerSafetyFromXParams = new TriggerSafetyFromXParams();
                }
                return this.mTriggerSafetyFromXParams;
            }
        }
        
        public virtual AssertSavePromptedExpectedValues AssertSavePromptedExpectedValues
        {
            get
            {
                if ((this.mAssertSavePromptedExpectedValues == null))
                {
                    this.mAssertSavePromptedExpectedValues = new AssertSavePromptedExpectedValues();
                }
                return this.mAssertSavePromptedExpectedValues;
            }
        }
        
        public virtual ChooseToSaveFromMenuParams ChooseToSaveFromMenuParams
        {
            get
            {
                if ((this.mChooseToSaveFromMenuParams == null))
                {
                    this.mChooseToSaveFromMenuParams = new ChooseToSaveFromMenuParams();
                }
                return this.mChooseToSaveFromMenuParams;
            }
        }
        
        public virtual AssertSavePromptedFromMenuExpectedValues AssertSavePromptedFromMenuExpectedValues
        {
            get
            {
                if ((this.mAssertSavePromptedFromMenuExpectedValues == null))
                {
                    this.mAssertSavePromptedFromMenuExpectedValues = new AssertSavePromptedFromMenuExpectedValues();
                }
                return this.mAssertSavePromptedFromMenuExpectedValues;
            }
        }
        
        public virtual ChooseToSaveFromXButtonParams ChooseToSaveFromXButtonParams
        {
            get
            {
                if ((this.mChooseToSaveFromXButtonParams == null))
                {
                    this.mChooseToSaveFromXButtonParams = new ChooseToSaveFromXButtonParams();
                }
                return this.mChooseToSaveFromXButtonParams;
            }
        }
        
        public virtual AssertSavePromptedFromXButtonExpectedValues AssertSavePromptedFromXButtonExpectedValues
        {
            get
            {
                if ((this.mAssertSavePromptedFromXButtonExpectedValues == null))
                {
                    this.mAssertSavePromptedFromXButtonExpectedValues = new AssertSavePromptedFromXButtonExpectedValues();
                }
                return this.mAssertSavePromptedFromXButtonExpectedValues;
            }
        }
        
        public virtual CancelFromXButtonParams CancelFromXButtonParams
        {
            get
            {
                if ((this.mCancelFromXButtonParams == null))
                {
                    this.mCancelFromXButtonParams = new CancelFromXButtonParams();
                }
                return this.mCancelFromXButtonParams;
            }
        }
        
        public virtual SameSpreadsheetOpenXButtonExpectedValues SameSpreadsheetOpenXButtonExpectedValues
        {
            get
            {
                if ((this.mSameSpreadsheetOpenXButtonExpectedValues == null))
                {
                    this.mSameSpreadsheetOpenXButtonExpectedValues = new SameSpreadsheetOpenXButtonExpectedValues();
                }
                return this.mSameSpreadsheetOpenXButtonExpectedValues;
            }
        }
        
        public virtual CancelFromMenuParams CancelFromMenuParams
        {
            get
            {
                if ((this.mCancelFromMenuParams == null))
                {
                    this.mCancelFromMenuParams = new CancelFromMenuParams();
                }
                return this.mCancelFromMenuParams;
            }
        }
        
        public virtual SameSpreadsheetOpenMenuExpectedValues SameSpreadsheetOpenMenuExpectedValues
        {
            get
            {
                if ((this.mSameSpreadsheetOpenMenuExpectedValues == null))
                {
                    this.mSameSpreadsheetOpenMenuExpectedValues = new SameSpreadsheetOpenMenuExpectedValues();
                }
                return this.mSameSpreadsheetOpenMenuExpectedValues;
            }
        }
        
        public virtual DeclineSaveXButtonParams DeclineSaveXButtonParams
        {
            get
            {
                if ((this.mDeclineSaveXButtonParams == null))
                {
                    this.mDeclineSaveXButtonParams = new DeclineSaveXButtonParams();
                }
                return this.mDeclineSaveXButtonParams;
            }
        }
        
        public virtual DeclineSaveMenuParams DeclineSaveMenuParams
        {
            get
            {
                if ((this.mDeclineSaveMenuParams == null))
                {
                    this.mDeclineSaveMenuParams = new DeclineSaveMenuParams();
                }
                return this.mDeclineSaveMenuParams;
            }
        }
        
        public virtual AssertSavePromptExpectedValues AssertSavePromptExpectedValues
        {
            get
            {
                if ((this.mAssertSavePromptExpectedValues == null))
                {
                    this.mAssertSavePromptExpectedValues = new AssertSavePromptExpectedValues();
                }
                return this.mAssertSavePromptExpectedValues;
            }
        }
        
        public virtual SaveToNewNameParams SaveToNewNameParams
        {
            get
            {
                if ((this.mSaveToNewNameParams == null))
                {
                    this.mSaveToNewNameParams = new SaveToNewNameParams();
                }
                return this.mSaveToNewNameParams;
            }
        }
        
        public virtual AssertNewNameExpectedValues AssertNewNameExpectedValues
        {
            get
            {
                if ((this.mAssertNewNameExpectedValues == null))
                {
                    this.mAssertNewNameExpectedValues = new AssertNewNameExpectedValues();
                }
                return this.mAssertNewNameExpectedValues;
            }
        }
        
        public virtual SaveAndOpenNewParams SaveAndOpenNewParams
        {
            get
            {
                if ((this.mSaveAndOpenNewParams == null))
                {
                    this.mSaveAndOpenNewParams = new SaveAndOpenNewParams();
                }
                return this.mSaveAndOpenNewParams;
            }
        }
        
        public virtual AssertLoadedBackExpectedValues AssertLoadedBackExpectedValues
        {
            get
            {
                if ((this.mAssertLoadedBackExpectedValues == null))
                {
                    this.mAssertLoadedBackExpectedValues = new AssertLoadedBackExpectedValues();
                }
                return this.mAssertLoadedBackExpectedValues;
            }
        }
        
        public virtual SaveNewNameParams SaveNewNameParams
        {
            get
            {
                if ((this.mSaveNewNameParams == null))
                {
                    this.mSaveNewNameParams = new SaveNewNameParams();
                }
                return this.mSaveNewNameParams;
            }
        }
        
        public virtual CheckNewNameExpectedValues CheckNewNameExpectedValues
        {
            get
            {
                if ((this.mCheckNewNameExpectedValues == null))
                {
                    this.mCheckNewNameExpectedValues = new CheckNewNameExpectedValues();
                }
                return this.mCheckNewNameExpectedValues;
            }
        }
        
        public virtual ChangeSaveExitParams ChangeSaveExitParams
        {
            get
            {
                if ((this.mChangeSaveExitParams == null))
                {
                    this.mChangeSaveExitParams = new ChangeSaveExitParams();
                }
                return this.mChangeSaveExitParams;
            }
        }
        
        public virtual SaveChangedSpreadsheetParams SaveChangedSpreadsheetParams
        {
            get
            {
                if ((this.mSaveChangedSpreadsheetParams == null))
                {
                    this.mSaveChangedSpreadsheetParams = new SaveChangedSpreadsheetParams();
                }
                return this.mSaveChangedSpreadsheetParams;
            }
        }
        
        public virtual AssertOpenedChangedExpectedValues AssertOpenedChangedExpectedValues
        {
            get
            {
                if ((this.mAssertOpenedChangedExpectedValues == null))
                {
                    this.mAssertOpenedChangedExpectedValues = new AssertOpenedChangedExpectedValues();
                }
                return this.mAssertOpenedChangedExpectedValues;
            }
        }
        
        public UINewSpreadsheetsprdWindow UINewSpreadsheetsprdWindow
        {
            get
            {
                if ((this.mUINewSpreadsheetsprdWindow == null))
                {
                    this.mUINewSpreadsheetsprdWindow = new UINewSpreadsheetsprdWindow();
                }
                return this.mUINewSpreadsheetsprdWindow;
            }
        }
        
        public UIThereareunsavedchangWindow UIThereareunsavedchangWindow
        {
            get
            {
                if ((this.mUIThereareunsavedchangWindow == null))
                {
                    this.mUIThereareunsavedchangWindow = new UIThereareunsavedchangWindow();
                }
                return this.mUIThereareunsavedchangWindow;
            }
        }
        
        public UINewSpreadsheetsprdWindow1 UINewSpreadsheetsprdWindow1
        {
            get
            {
                if ((this.mUINewSpreadsheetsprdWindow1 == null))
                {
                    this.mUINewSpreadsheetsprdWindow1 = new UINewSpreadsheetsprdWindow1();
                }
                return this.mUINewSpreadsheetsprdWindow1;
            }
        }
        
        public UIClickonanycellwithyoWindow UIClickonanycellwithyoWindow
        {
            get
            {
                if ((this.mUIClickonanycellwithyoWindow == null))
                {
                    this.mUIClickonanycellwithyoWindow = new UIClickonanycellwithyoWindow();
                }
                return this.mUIClickonanycellwithyoWindow;
            }
        }
        
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow();
                }
                return this.mUIOKWindow;
            }
        }
        
        public UITheenteredformulacreWindow UITheenteredformulacreWindow
        {
            get
            {
                if ((this.mUITheenteredformulacreWindow == null))
                {
                    this.mUITheenteredformulacreWindow = new UITheenteredformulacreWindow();
                }
                return this.mUITheenteredformulacreWindow;
            }
        }
        
        public UICodeMeterCCWindow UICodeMeterCCWindow
        {
            get
            {
                if ((this.mUICodeMeterCCWindow == null))
                {
                    this.mUICodeMeterCCWindow = new UICodeMeterCCWindow();
                }
                return this.mUICodeMeterCCWindow;
            }
        }
        
        public UIProgramManagerWindow UIProgramManagerWindow
        {
            get
            {
                if ((this.mUIProgramManagerWindow == null))
                {
                    this.mUIProgramManagerWindow = new UIProgramManagerWindow();
                }
                return this.mUIProgramManagerWindow;
            }
        }
        
        public UIOpenFileSecurityWarnWindow UIOpenFileSecurityWarnWindow
        {
            get
            {
                if ((this.mUIOpenFileSecurityWarnWindow == null))
                {
                    this.mUIOpenFileSecurityWarnWindow = new UIOpenFileSecurityWarnWindow();
                }
                return this.mUIOpenFileSecurityWarnWindow;
            }
        }
        
        public UISaveWindow UISaveWindow
        {
            get
            {
                if ((this.mUISaveWindow == null))
                {
                    this.mUISaveWindow = new UISaveWindow();
                }
                return this.mUISaveWindow;
            }
        }
        
        public UICUsersmarcheseSourceWindow UICUsersmarcheseSourceWindow
        {
            get
            {
                if ((this.mUICUsersmarcheseSourceWindow == null))
                {
                    this.mUICUsersmarcheseSourceWindow = new UICUsersmarcheseSourceWindow();
                }
                return this.mUICUsersmarcheseSourceWindow;
            }
        }
        
        public UIOpenaSpreadsheetWindow UIOpenaSpreadsheetWindow
        {
            get
            {
                if ((this.mUIOpenaSpreadsheetWindow == null))
                {
                    this.mUIOpenaSpreadsheetWindow = new UIOpenaSpreadsheetWindow();
                }
                return this.mUIOpenaSpreadsheetWindow;
            }
        }
        
        public UICUsersmarcheseSourceWindow1 UICUsersmarcheseSourceWindow1
        {
            get
            {
                if ((this.mUICUsersmarcheseSourceWindow1 == null))
                {
                    this.mUICUsersmarcheseSourceWindow1 = new UICUsersmarcheseSourceWindow1();
                }
                return this.mUICUsersmarcheseSourceWindow1;
            }
        }
        
        public UIConfirmSaveAsWindow UIConfirmSaveAsWindow
        {
            get
            {
                if ((this.mUIConfirmSaveAsWindow == null))
                {
                    this.mUIConfirmSaveAsWindow = new UIConfirmSaveAsWindow();
                }
                return this.mUIConfirmSaveAsWindow;
            }
        }
        #endregion
        
        #region Fields
        private OpenSpreadsheetParams mOpenSpreadsheetParams;
        
        private EnterContentsParams mEnterContentsParams;
        
        private UpdateCheckedByValueLabelExpectedValues mUpdateCheckedByValueLabelExpectedValues;
        
        private CheckFocusA1ExpectedValues mCheckFocusA1ExpectedValues;
        
        private CheckContentBoxExpectedValues mCheckContentBoxExpectedValues;
        
        private OverwriteA1Params mOverwriteA1Params;
        
        private CheckOverwirteWorkedExpectedValues mCheckOverwirteWorkedExpectedValues;
        
        private CheckEmptyContentsOnSecondSpreadsheetExpectedValues mCheckEmptyContentsOnSecondSpreadsheetExpectedValues;
        
        private InputInSS1AndOpenSS2Params mInputInSS1AndOpenSS2Params;
        
        private CheckContentsOfOldAndNewSSExpectedValues mCheckContentsOfOldAndNewSSExpectedValues;
        
        private OpenSecondSSAndEnterValuesParams mOpenSecondSSAndEnterValuesParams;
        
        private CheckSS1B2AndSS2A1ExpectedValues mCheckSS1B2AndSS2A1ExpectedValues;
        
        private SecondWindowExistsExpectedValues mSecondWindowExistsExpectedValues;
        
        private CheckHelpTextExpectedValues mCheckHelpTextExpectedValues;
        
        private NameLabelB2ExpectedValues mNameLabelB2ExpectedValues;
        
        private NameLabelB7ExpectedValues mNameLabelB7ExpectedValues;
        
        private PlugInContentsParams mPlugInContentsParams;
        
        private CheckC3Value2ExpectedValues mCheckC3Value2ExpectedValues;
        
        private CheckB4ValueHelloExpectedValues mCheckB4ValueHelloExpectedValues;
        
        private CheckC5Value1ExpectedValues mCheckC5Value1ExpectedValues;
        
        private AssertMethod1ExpectedValues mAssertMethod1ExpectedValues;
        
        private EnterSomeContentsParams mEnterSomeContentsParams;
        
        private A2IsHelloExpectedValues mA2IsHelloExpectedValues;
        
        private CheckContentsOfC2ExpectedValues mCheckContentsOfC2ExpectedValues;
        
        private CheckContentsOfB4ExpectedValues mCheckContentsOfB4ExpectedValues;
        
        private CreateCircularDependencyParams mCreateCircularDependencyParams;
        
        private CheckSCircDepErrorMessageExpectedValues mCheckSCircDepErrorMessageExpectedValues;
        
        private CreateFormulaProblemsParams mCreateFormulaProblemsParams;
        
        private CheckErrorMessageForFormulaProblemsExpectedValues mCheckErrorMessageForFormulaProblemsExpectedValues;
        
        private TabbedSomeParams mTabbedSomeParams;
        
        private CheckSelectionExpectedValues mCheckSelectionExpectedValues;
        
        private MakeSelectionAndShiftTabBackParams mMakeSelectionAndShiftTabBackParams;
        
        private ShiftTabCheckExpectedValues mShiftTabCheckExpectedValues;
        
        private CloseFromMenueWithChangesParams mCloseFromMenueWithChangesParams;
        
        private TriggerSafetyFromMenuParams mTriggerSafetyFromMenuParams;
        
        private AssertSafetyFeatureTriggeredExpectedValues mAssertSafetyFeatureTriggeredExpectedValues;
        
        private TriggerSafetyFromXParams mTriggerSafetyFromXParams;
        
        private AssertSavePromptedExpectedValues mAssertSavePromptedExpectedValues;
        
        private ChooseToSaveFromMenuParams mChooseToSaveFromMenuParams;
        
        private AssertSavePromptedFromMenuExpectedValues mAssertSavePromptedFromMenuExpectedValues;
        
        private ChooseToSaveFromXButtonParams mChooseToSaveFromXButtonParams;
        
        private AssertSavePromptedFromXButtonExpectedValues mAssertSavePromptedFromXButtonExpectedValues;
        
        private CancelFromXButtonParams mCancelFromXButtonParams;
        
        private SameSpreadsheetOpenXButtonExpectedValues mSameSpreadsheetOpenXButtonExpectedValues;
        
        private CancelFromMenuParams mCancelFromMenuParams;
        
        private SameSpreadsheetOpenMenuExpectedValues mSameSpreadsheetOpenMenuExpectedValues;
        
        private DeclineSaveXButtonParams mDeclineSaveXButtonParams;
        
        private DeclineSaveMenuParams mDeclineSaveMenuParams;
        
        private AssertSavePromptExpectedValues mAssertSavePromptExpectedValues;
        
        private SaveToNewNameParams mSaveToNewNameParams;
        
        private AssertNewNameExpectedValues mAssertNewNameExpectedValues;
        
        private SaveAndOpenNewParams mSaveAndOpenNewParams;
        
        private AssertLoadedBackExpectedValues mAssertLoadedBackExpectedValues;
        
        private SaveNewNameParams mSaveNewNameParams;
        
        private CheckNewNameExpectedValues mCheckNewNameExpectedValues;
        
        private ChangeSaveExitParams mChangeSaveExitParams;
        
        private SaveChangedSpreadsheetParams mSaveChangedSpreadsheetParams;
        
        private AssertOpenedChangedExpectedValues mAssertOpenedChangedExpectedValues;
        
        private UINewSpreadsheetsprdWindow mUINewSpreadsheetsprdWindow;
        
        private UIThereareunsavedchangWindow mUIThereareunsavedchangWindow;
        
        private UINewSpreadsheetsprdWindow1 mUINewSpreadsheetsprdWindow1;
        
        private UIClickonanycellwithyoWindow mUIClickonanycellwithyoWindow;
        
        private UIOKWindow mUIOKWindow;
        
        private UITheenteredformulacreWindow mUITheenteredformulacreWindow;
        
        private UICodeMeterCCWindow mUICodeMeterCCWindow;
        
        private UIProgramManagerWindow mUIProgramManagerWindow;
        
        private UIOpenFileSecurityWarnWindow mUIOpenFileSecurityWarnWindow;
        
        private UISaveWindow mUISaveWindow;
        
        private UICUsersmarcheseSourceWindow mUICUsersmarcheseSourceWindow;
        
        private UIOpenaSpreadsheetWindow mUIOpenaSpreadsheetWindow;
        
        private UICUsersmarcheseSourceWindow1 mUICUsersmarcheseSourceWindow1;
        
        private UIConfirmSaveAsWindow mUIConfirmSaveAsWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OpenSpreadsheet'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OpenSpreadsheetParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\CS3500Assignments\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string ExePath = "C:\\Users\\TimothySchelz\\Source\\Repos\\CS3500Assignments\\PS4\\SpreadsheetGUI\\bin\\Debu" +
            "g\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\CS3500Assignments\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string AlternateExePath = "..\\..\\..\\SpreadsheetGUI\\bin\\Debug\\Spreads" +
            "heetGUI.exe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'EnterContents'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class EnterContentsParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Hello' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditText = "Hello";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'UpdateCheckedByValueLabel'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UpdateCheckedByValueLabelExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Hello' label equals 'Hello'
        /// </summary>
        public string UIHelloTextDisplayText = "Hello";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckFocusA1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckFocusA1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'A1' label equals 'A1'
        /// </summary>
        public string UIA1TextDisplayText = "A1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckContentBox'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckContentBoxExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'ContentsBox' text box equals 'Hello'
        /// </summary>
        public string UIContentsBoxEditText = "Hello";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OverwriteA1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OverwriteA1Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'Goodbye' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditText = "Goodbye";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckOverwirteWorked'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckOverwirteWorkedExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Goodbye' label equals 'Goodbye'
        /// </summary>
        public string UIGoodbyeTextDisplayText = "Goodbye";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckEmptyContentsOnSecondSpreadsheet'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckEmptyContentsOnSecondSpreadsheetExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'ContentsBox' text box equals ''
        /// </summary>
        public string UIContentsBoxEditText = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'InputInSS1AndOpenSS2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputInSS1AndOpenSS2Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'Hello' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditText = "Hello";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckContentsOfOldAndNewSS'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckContentsOfOldAndNewSSExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'ContentsBox' text box equals ''
        /// </summary>
        public string UIContentsBoxEditText = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'ContentsBox' text box equals 'Hello'
        /// </summary>
        public string UIContentsBoxEditText1 = "Hello";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OpenSecondSSAndEnterValues'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OpenSecondSSAndEnterValuesParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Hello' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditText = "Hello";
        
        /// <summary>
        /// Type 'Goodbye' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditText1 = "Goodbye";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckSS1B2AndSS2A1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckSS1B2AndSS2A1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'B1' label equals 'B1'
        /// </summary>
        public string UIB1TextName = "B1";
        
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Goodbye' label equals 'Goodbye'
        /// </summary>
        public string UIGoodbyeTextDisplayText = "Goodbye";
        
        /// <summary>
        /// Verify that the 'DisplayText' property of 'A1' label equals 'A1'
        /// </summary>
        public string UIA1TextDisplayText = "A1";
        
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Hello' label equals 'Hello'
        /// </summary>
        public string UIHelloTextDisplayText = "Hello";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SecondWindowExists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SecondWindowExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'NewSpreadsheet.sprd' window equals 'NewSpreadsheet.sprd'
        /// </summary>
        public string UINewSpreadsheetsprdWindowName = "NewSpreadsheet.sprd";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckHelpText'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckHelpTextExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Click on any cell with your mouse to select it. At...' label equals 'Click on any cell with your mouse to select it.  At the top the cell name and the value are displayed.  Next to them is an editable textbox with the current contents of the cells.  You can change the contents in this textbox and then hit "Update" or type ENTER to update the contents of the cell.'
        /// </summary>
        public string UIClickonanycellwithyoTextDisplayText = @"Click on any cell with your mouse to select it.  At the top the cell name and the value are displayed.  Next to them is an editable textbox with the current contents of the cells.  You can change the contents in this textbox and then hit ""Update"" or type ENTER to update the contents of the cell.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'NameLabelB2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NameLabelB2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'B2' label equals 'B2'
        /// </summary>
        public string UIB2TextName = "B2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'NameLabelB7'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NameLabelB7ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'B7' label equals 'B7'
        /// </summary>
        public string UIB7TextName = "B7";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'PlugInContents'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class PlugInContentsParams
    {
        
        #region Fields
        /// <summary>
        /// Type '1' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditText = "1";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'Hello' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditText1 = "Hello";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '=C5+1' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditText2 = "=C5+1";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditSendKeys2 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckC3Value2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckC3Value2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of '2' label equals '2'
        /// </summary>
        public string UIItem2TextName = "2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckB4ValueHello'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckB4ValueHelloExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Hello' label equals 'Hello'
        /// </summary>
        public string UIHelloTextName = "Hello";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckC5Value1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckC5Value1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of '1' label equals '1'
        /// </summary>
        public string UIItem1TextName = "1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertMethod1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'E11' label equals 'E11'
        /// </summary>
        public string UIE11TextName = "E11";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'EnterSomeContents'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class EnterSomeContentsParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Hello' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditText = "Hello";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '5' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditText1 = "5";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '=C2+2' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditText2 = "=C2+2";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditSendKeys2 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'A2IsHello'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class A2IsHelloExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'ContentsBox' text box equals 'Hello'
        /// </summary>
        public string UIContentsBoxEditText = "Hello";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckContentsOfC2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckContentsOfC2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'ContentsBox' text box equals '5'
        /// </summary>
        public string UIContentsBoxEditText = "5";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckContentsOfB4'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckContentsOfB4ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'ContentsBox' text box equals '=C2+2'
        /// </summary>
        public string UIContentsBoxEditText = "=C2+2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CreateCircularDependency'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CreateCircularDependencyParams
    {
        
        #region Fields
        /// <summary>
        /// Type '1' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditText = "1";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '=A1' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditText1 = "=A1";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '=A2' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditText2 = "=A2";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type '=A3' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditText3 = "=A3";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditSendKeys3 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckSCircDepErrorMessage'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckSCircDepErrorMessageExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'The entered formula creates a circular dependency....' label equals 'The entered formula creates a circular dependency.  Make sure your formula does not depend on the cell it is in.'
        /// </summary>
        public string UITheenteredformulacreTextName = "The entered formula creates a circular dependency.  Make sure your formula does n" +
            "ot depend on the cell it is in.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CreateFormulaProblems'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CreateFormulaProblemsParams
    {
        
        #region Fields
        /// <summary>
        /// Type '=A1A1A1' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditText = "=A1A1A1";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckErrorMessageForFormulaProblems'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckErrorMessageForFormulaProblemsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ControlType' property of Dialog equals 'Dialog'
        /// </summary>
        public string UIItemDialogControlType = "Dialog";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TabbedSome'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TabbedSomeParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{Tab}{Tab}{Tab}' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditSendKeys = "{Tab}{Tab}{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckSelection'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckSelectionExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'D1' label equals 'D1'
        /// </summary>
        public string UID1TextName = "D1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'MakeSelectionAndShiftTabBack'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class MakeSelectionAndShiftTabBackParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Shift + {Tab}' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type 'Shift + {Tab}' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditSendKeys1 = "{Tab}";
        
        /// <summary>
        /// Type 'Shift + {Tab}' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditSendKeys2 = "{Tab}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ShiftTabCheck'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ShiftTabCheckExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'A6' label equals 'A6'
        /// </summary>
        public string UIA6TextName = "A6";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CloseFromMenueWithChanges'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CloseFromMenueWithChangesParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'hello' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditText = "hello";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TriggerSafetyFromMenu'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TriggerSafetyFromMenuParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Hello' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditText = "Hello";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertSafetyFeatureTriggered'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertSafetyFeatureTriggeredExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'There are unsaved changes.' title bar equals 'There are unsaved changes.'
        /// </summary>
        public string UIThereareunsavedchangTitleBarDisplayText = "There are unsaved changes.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TriggerSafetyFromX'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TriggerSafetyFromXParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Hello' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditText = "Hello";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertSavePrompted'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertSavePromptedExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Save' title bar equals 'Save'
        /// </summary>
        public string UISaveTitleBarDisplayText = "Save";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ChooseToSaveFromMenu'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ChooseToSaveFromMenuParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Changed' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditText = "Changed";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertSavePromptedFromMenu'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertSavePromptedFromMenuExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Save' title bar equals 'Save'
        /// </summary>
        public string UISaveTitleBarDisplayText = "Save";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ChooseToSaveFromXButton'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ChooseToSaveFromXButtonParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'changed' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditText = "changed";
        
        /// <summary>
        /// Type '{Enter}{Enter}' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditSendKeys = "{Enter}{Enter}";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditSendKeys1 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertSavePromptedFromXButton'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertSavePromptedFromXButtonExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Save' title bar equals 'Save'
        /// </summary>
        public string UISaveTitleBarDisplayText = "Save";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CancelFromXButton'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CancelFromXButtonParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'change' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditText = "change";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SameSpreadsheetOpenXButton'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SameSpreadsheetOpenXButtonExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Changed' label equals 'Changed'
        /// </summary>
        public string UIChangedTextName = "Changed";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CancelFromMenu'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CancelFromMenuParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'NewContent' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditText = "NewContent";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SameSpreadsheetOpenMenu'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SameSpreadsheetOpenMenuExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'NewContent' label equals 'NewContent'
        /// </summary>
        public string UINewContentTextName = "NewContent";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'DeclineSaveXButton'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DeclineSaveXButtonParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Prompt Save' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditText = "Prompt Save";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'DeclineSaveMenu'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DeclineSaveMenuParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'prompt save' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditText = "prompt save";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertSavePrompt'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertSavePromptExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Save' title bar equals 'Save'
        /// </summary>
        public string UISaveTitleBarDisplayText = "Save";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SaveToNewName'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SaveToNewNameParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'data' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditText = "data";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Select 'NewName.sprd' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "NewName.sprd";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertNewName'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertNewNameExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'C:\Users\marchese\Source\Repos\CS3500_Tim_CoS\PS4\...' title bar is not equal to 'NewSpreadsheet.sprd'
        /// </summary>
        public string UICUsersmarcheseSourceTitleBarDisplayText = "NewSpreadsheet.sprd";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SaveAndOpenNew'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SaveAndOpenNewParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'NonEmptyCell' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditText = "NonEmptyCell";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Select 'ChangedSheet.sprd' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "ChangedSheet.sprd";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertLoadedBack'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertLoadedBackExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'NonEmptyCell' label equals 'NonEmptyCell'
        /// </summary>
        public string UINonEmptyCellTextName = "NonEmptyCell";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SaveNewName'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SaveNewNameParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'NewName.sprd' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "NewName.sprd";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckNewName'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckNewNameExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'C:\Users\marchese\Source\Repos\CS3500_Tim_CoS\PS4\...' title bar is not equal to 'NewSpreadsheet.sprd'
        /// </summary>
        public string UICUsersmarcheseSourceTitleBarDisplayText = "NewSpreadsheet.sprd";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ChangeSaveExit'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ChangeSaveExitParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Changed' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditText = "Changed";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Select 'NewName.sprd' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "NewName.sprd";
        
        /// <summary>
        /// Type '{Enter}' in 'File name:' text box
        /// </summary>
        public string UIFilenameEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SaveChangedSpreadsheet'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SaveChangedSpreadsheetParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Changed' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditText = "Changed";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Select 'NewName.sprd' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "NewName.sprd";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertOpenedChanged'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertOpenedChangedExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Changed' label equals 'Changed'
        /// </summary>
        public string UIChangedTextName = "Changed";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINewSpreadsheetsprdWindow : WinWindow
    {
        
        public UINewSpreadsheetsprdWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "NewSpreadsheet.sprd";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("NewSpreadsheet.sprd");
            #endregion
        }
        
        #region Properties
        public UIContentsBoxWindow UIContentsBoxWindow
        {
            get
            {
                if ((this.mUIContentsBoxWindow == null))
                {
                    this.mUIContentsBoxWindow = new UIContentsBoxWindow(this);
                }
                return this.mUIContentsBoxWindow;
            }
        }
        
        public UIUpdateWindow UIUpdateWindow
        {
            get
            {
                if ((this.mUIUpdateWindow == null))
                {
                    this.mUIUpdateWindow = new UIUpdateWindow(this);
                }
                return this.mUIUpdateWindow;
            }
        }
        
        public UIHelloWindow UIHelloWindow
        {
            get
            {
                if ((this.mUIHelloWindow == null))
                {
                    this.mUIHelloWindow = new UIHelloWindow(this);
                }
                return this.mUIHelloWindow;
            }
        }
        
        public UINewSpreadsheetsprdTitleBar UINewSpreadsheetsprdTitleBar
        {
            get
            {
                if ((this.mUINewSpreadsheetsprdTitleBar == null))
                {
                    this.mUINewSpreadsheetsprdTitleBar = new UINewSpreadsheetsprdTitleBar(this);
                }
                return this.mUINewSpreadsheetsprdTitleBar;
            }
        }
        
        public UIA1Window UIA1Window
        {
            get
            {
                if ((this.mUIA1Window == null))
                {
                    this.mUIA1Window = new UIA1Window(this);
                }
                return this.mUIA1Window;
            }
        }
        
        public UIMenuStrip1Window UIMenuStrip1Window
        {
            get
            {
                if ((this.mUIMenuStrip1Window == null))
                {
                    this.mUIMenuStrip1Window = new UIMenuStrip1Window(this);
                }
                return this.mUIMenuStrip1Window;
            }
        }
        
        public UIMenuStrip1MenuBar UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        
        public UIUpdateWindow1 UIUpdateWindow1
        {
            get
            {
                if ((this.mUIUpdateWindow1 == null))
                {
                    this.mUIUpdateWindow1 = new UIUpdateWindow1(this);
                }
                return this.mUIUpdateWindow1;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UISpreadsheetPanel1Window UISpreadsheetPanel1Window
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Window == null))
                {
                    this.mUISpreadsheetPanel1Window = new UISpreadsheetPanel1Window(this);
                }
                return this.mUISpreadsheetPanel1Window;
            }
        }
        #endregion
        
        #region Fields
        private UIContentsBoxWindow mUIContentsBoxWindow;
        
        private UIUpdateWindow mUIUpdateWindow;
        
        private UIHelloWindow mUIHelloWindow;
        
        private UINewSpreadsheetsprdTitleBar mUINewSpreadsheetsprdTitleBar;
        
        private UIA1Window mUIA1Window;
        
        private UIMenuStrip1Window mUIMenuStrip1Window;
        
        private UIMenuStrip1MenuBar mUIMenuStrip1MenuBar;
        
        private UIUpdateWindow1 mUIUpdateWindow1;
        
        private UIItemWindow mUIItemWindow;
        
        private UISpreadsheetPanel1Window mUISpreadsheetPanel1Window;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIContentsBoxWindow : WinWindow
    {
        
        public UIContentsBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "ContentsBox";
            this.WindowTitles.Add("NewSpreadsheet.sprd");
            #endregion
        }
        
        #region Properties
        public WinEdit UIContentsBoxEdit
        {
            get
            {
                if ((this.mUIContentsBoxEdit == null))
                {
                    this.mUIContentsBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIContentsBoxEdit.WindowTitles.Add("NewSpreadsheet.sprd");
                    #endregion
                }
                return this.mUIContentsBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIContentsBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIUpdateWindow : WinWindow
    {
        
        public UIUpdateWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "Enter";
            this.WindowTitles.Add("NewSpreadsheet.sprd");
            #endregion
        }
        
        #region Properties
        public WinButton UIUpdateButton
        {
            get
            {
                if ((this.mUIUpdateButton == null))
                {
                    this.mUIUpdateButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIUpdateButton.SearchProperties[WinButton.PropertyNames.Name] = "Update";
                    this.mUIUpdateButton.WindowTitles.Add("NewSpreadsheet.sprd");
                    #endregion
                }
                return this.mUIUpdateButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIUpdateButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIHelloWindow : WinWindow
    {
        
        public UIHelloWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "ValueLabel";
            this.WindowTitles.Add("NewSpreadsheet.sprd");
            #endregion
        }
        
        #region Properties
        public WinText UIHelloText
        {
            get
            {
                if ((this.mUIHelloText == null))
                {
                    this.mUIHelloText = new WinText(this);
                    #region Search Criteria
                    this.mUIHelloText.SearchProperties[WinText.PropertyNames.Name] = "Hello";
                    this.mUIHelloText.WindowTitles.Add("NewSpreadsheet.sprd");
                    #endregion
                }
                return this.mUIHelloText;
            }
        }
        
        public WinText UIGoodbyeText
        {
            get
            {
                if ((this.mUIGoodbyeText == null))
                {
                    this.mUIGoodbyeText = new WinText(this);
                    #region Search Criteria
                    this.mUIGoodbyeText.SearchProperties[WinText.PropertyNames.Name] = "Goodbye";
                    this.mUIGoodbyeText.WindowTitles.Add("NewSpreadsheet.sprd");
                    #endregion
                }
                return this.mUIGoodbyeText;
            }
        }
        
        public WinText UIItem2Text
        {
            get
            {
                if ((this.mUIItem2Text == null))
                {
                    this.mUIItem2Text = new WinText(this);
                    #region Search Criteria
                    this.mUIItem2Text.SearchProperties[WinText.PropertyNames.Name] = "2";
                    this.mUIItem2Text.WindowTitles.Add("NewSpreadsheet.sprd");
                    #endregion
                }
                return this.mUIItem2Text;
            }
        }
        
        public WinText UIItem1Text
        {
            get
            {
                if ((this.mUIItem1Text == null))
                {
                    this.mUIItem1Text = new WinText(this);
                    #region Search Criteria
                    this.mUIItem1Text.SearchProperties[WinText.PropertyNames.Name] = "1";
                    this.mUIItem1Text.WindowTitles.Add("NewSpreadsheet.sprd");
                    #endregion
                }
                return this.mUIItem1Text;
            }
        }
        
        public WinText UIChangedText
        {
            get
            {
                if ((this.mUIChangedText == null))
                {
                    this.mUIChangedText = new WinText(this);
                    #region Search Criteria
                    this.mUIChangedText.SearchProperties[WinText.PropertyNames.Name] = "Changed";
                    this.mUIChangedText.WindowTitles.Add("NewSpreadsheet.sprd");
                    #endregion
                }
                return this.mUIChangedText;
            }
        }
        
        public WinText UINewContentText
        {
            get
            {
                if ((this.mUINewContentText == null))
                {
                    this.mUINewContentText = new WinText(this);
                    #region Search Criteria
                    this.mUINewContentText.SearchProperties[WinText.PropertyNames.Name] = "NewContent";
                    this.mUINewContentText.WindowTitles.Add("NewSpreadsheet.sprd");
                    #endregion
                }
                return this.mUINewContentText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIHelloText;
        
        private WinText mUIGoodbyeText;
        
        private WinText mUIItem2Text;
        
        private WinText mUIItem1Text;
        
        private WinText mUIChangedText;
        
        private WinText mUINewContentText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINewSpreadsheetsprdTitleBar : WinTitleBar
    {
        
        public UINewSpreadsheetsprdTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("NewSpreadsheet.sprd");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("NewSpreadsheet.sprd");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIA1Window : WinWindow
    {
        
        public UIA1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "SelectionLabel";
            this.WindowTitles.Add("NewSpreadsheet.sprd");
            #endregion
        }
        
        #region Properties
        public WinText UIA1Text
        {
            get
            {
                if ((this.mUIA1Text == null))
                {
                    this.mUIA1Text = new WinText(this);
                    #region Search Criteria
                    this.mUIA1Text.SearchProperties[WinText.PropertyNames.Name] = "A1";
                    this.mUIA1Text.WindowTitles.Add("NewSpreadsheet.sprd");
                    #endregion
                }
                return this.mUIA1Text;
            }
        }
        
        public WinText UIB1Text
        {
            get
            {
                if ((this.mUIB1Text == null))
                {
                    this.mUIB1Text = new WinText(this);
                    #region Search Criteria
                    this.mUIB1Text.SearchProperties[WinText.PropertyNames.Name] = "B1";
                    this.mUIB1Text.WindowTitles.Add("NewSpreadsheet.sprd");
                    #endregion
                }
                return this.mUIB1Text;
            }
        }
        
        public WinText UIB2Text
        {
            get
            {
                if ((this.mUIB2Text == null))
                {
                    this.mUIB2Text = new WinText(this);
                    #region Search Criteria
                    this.mUIB2Text.SearchProperties[WinText.PropertyNames.Name] = "B2";
                    this.mUIB2Text.WindowTitles.Add("NewSpreadsheet.sprd");
                    #endregion
                }
                return this.mUIB2Text;
            }
        }
        
        public WinText UIB7Text
        {
            get
            {
                if ((this.mUIB7Text == null))
                {
                    this.mUIB7Text = new WinText(this);
                    #region Search Criteria
                    this.mUIB7Text.SearchProperties[WinText.PropertyNames.Name] = "B7";
                    this.mUIB7Text.WindowTitles.Add("NewSpreadsheet.sprd");
                    #endregion
                }
                return this.mUIB7Text;
            }
        }
        
        public WinText UIE11Text
        {
            get
            {
                if ((this.mUIE11Text == null))
                {
                    this.mUIE11Text = new WinText(this);
                    #region Search Criteria
                    this.mUIE11Text.SearchProperties[WinText.PropertyNames.Name] = "E11";
                    this.mUIE11Text.WindowTitles.Add("NewSpreadsheet.sprd");
                    #endregion
                }
                return this.mUIE11Text;
            }
        }
        
        public WinText UID1Text
        {
            get
            {
                if ((this.mUID1Text == null))
                {
                    this.mUID1Text = new WinText(this);
                    #region Search Criteria
                    this.mUID1Text.SearchProperties[WinText.PropertyNames.Name] = "D1";
                    this.mUID1Text.WindowTitles.Add("NewSpreadsheet.sprd");
                    #endregion
                }
                return this.mUID1Text;
            }
        }
        
        public WinText UIA6Text
        {
            get
            {
                if ((this.mUIA6Text == null))
                {
                    this.mUIA6Text = new WinText(this);
                    #region Search Criteria
                    this.mUIA6Text.SearchProperties[WinText.PropertyNames.Name] = "A6";
                    this.mUIA6Text.WindowTitles.Add("NewSpreadsheet.sprd");
                    #endregion
                }
                return this.mUIA6Text;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIA1Text;
        
        private WinText mUIB1Text;
        
        private WinText mUIB2Text;
        
        private WinText mUIB7Text;
        
        private WinText mUIE11Text;
        
        private WinText mUID1Text;
        
        private WinText mUIA6Text;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIMenuStrip1Window : WinWindow
    {
        
        public UIMenuStrip1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "menuStrip1";
            this.WindowTitles.Add("NewSpreadsheet.sprd");
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIMenuStrip1MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
                    this.mUIMenuStrip1MenuBar.WindowTitles.Add("NewSpreadsheet.sprd");
                    #endregion
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIMenuStrip1MenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIMenuStrip1MenuBar : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("NewSpreadsheet.sprd");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        
        public WinMenuItem UIHelpMenuItem
        {
            get
            {
                if ((this.mUIHelpMenuItem == null))
                {
                    this.mUIHelpMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIHelpMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Help";
                    this.mUIHelpMenuItem.WindowTitles.Add("NewSpreadsheet.sprd");
                    #endregion
                }
                return this.mUIHelpMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem mUIFileMenuItem;
        
        private WinMenuItem mUIHelpMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFileMenuItem : WinMenuItem
    {
        
        public UIFileMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("NewSpreadsheet.sprd");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UINewMenuItem
        {
            get
            {
                if ((this.mUINewMenuItem == null))
                {
                    this.mUINewMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUINewMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "New";
                    this.mUINewMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUINewMenuItem.WindowTitles.Add("NewSpreadsheet.sprd");
                    #endregion
                }
                return this.mUINewMenuItem;
            }
        }
        
        public WinMenuItem UICloseMenuItem
        {
            get
            {
                if ((this.mUICloseMenuItem == null))
                {
                    this.mUICloseMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICloseMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Close";
                    this.mUICloseMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUICloseMenuItem.WindowTitles.Add("NewSpreadsheet.sprd");
                    #endregion
                }
                return this.mUICloseMenuItem;
            }
        }
        
        public WinMenuItem UISaveMenuItem
        {
            get
            {
                if ((this.mUISaveMenuItem == null))
                {
                    this.mUISaveMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save";
                    this.mUISaveMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveMenuItem.WindowTitles.Add("NewSpreadsheet.sprd");
                    #endregion
                }
                return this.mUISaveMenuItem;
            }
        }
        
        public WinMenuItem UIOpenMenuItem
        {
            get
            {
                if ((this.mUIOpenMenuItem == null))
                {
                    this.mUIOpenMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIOpenMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Open";
                    this.mUIOpenMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOpenMenuItem.WindowTitles.Add("NewSpreadsheet.sprd");
                    #endregion
                }
                return this.mUIOpenMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUINewMenuItem;
        
        private WinMenuItem mUICloseMenuItem;
        
        private WinMenuItem mUISaveMenuItem;
        
        private WinMenuItem mUIOpenMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIUpdateWindow1 : WinWindow
    {
        
        public UIUpdateWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "EnterButton";
            this.WindowTitles.Add("NewSpreadsheet.sprd");
            #endregion
        }
        
        #region Properties
        public WinButton UIUpdateButton
        {
            get
            {
                if ((this.mUIUpdateButton == null))
                {
                    this.mUIUpdateButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIUpdateButton.SearchProperties[WinButton.PropertyNames.Name] = "Update";
                    this.mUIUpdateButton.WindowTitles.Add("NewSpreadsheet.sprd");
                    #endregion
                }
                return this.mUIUpdateButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIUpdateButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("NewSpreadsheet.sprd");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("NewSpreadsheet.sprd");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISpreadsheetPanel1Window : WinWindow
    {
        
        public UISpreadsheetPanel1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadsheetPanel1";
            this.WindowTitles.Add("NewSpreadsheet.sprd");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("NewSpreadsheet.sprd");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIThereareunsavedchangWindow : WinWindow
    {
        
        public UIThereareunsavedchangWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "There are unsaved changes.";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("There are unsaved changes.");
            #endregion
        }
        
        #region Properties
        public UINOWindow UINOWindow
        {
            get
            {
                if ((this.mUINOWindow == null))
                {
                    this.mUINOWindow = new UINOWindow(this);
                }
                return this.mUINOWindow;
            }
        }
        
        public WinTitleBar UIThereareunsavedchangTitleBar
        {
            get
            {
                if ((this.mUIThereareunsavedchangTitleBar == null))
                {
                    this.mUIThereareunsavedchangTitleBar = new WinTitleBar(this);
                    #region Search Criteria
                    this.mUIThereareunsavedchangTitleBar.WindowTitles.Add("There are unsaved changes.");
                    #endregion
                }
                return this.mUIThereareunsavedchangTitleBar;
            }
        }
        
        public UIYesWindow UIYesWindow
        {
            get
            {
                if ((this.mUIYesWindow == null))
                {
                    this.mUIYesWindow = new UIYesWindow(this);
                }
                return this.mUIYesWindow;
            }
        }
        
        public UICancelWindow UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow(this);
                }
                return this.mUICancelWindow;
            }
        }
        #endregion
        
        #region Fields
        private UINOWindow mUINOWindow;
        
        private WinTitleBar mUIThereareunsavedchangTitleBar;
        
        private UIYesWindow mUIYesWindow;
        
        private UICancelWindow mUICancelWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINOWindow : WinWindow
    {
        
        public UINOWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "7";
            this.WindowTitles.Add("There are unsaved changes.");
            #endregion
        }
        
        #region Properties
        public WinButton UINOButton
        {
            get
            {
                if ((this.mUINOButton == null))
                {
                    this.mUINOButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINOButton.SearchProperties[WinButton.PropertyNames.Name] = "No";
                    this.mUINOButton.WindowTitles.Add("There are unsaved changes.");
                    #endregion
                }
                return this.mUINOButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINOButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIYesWindow : WinWindow
    {
        
        public UIYesWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("There are unsaved changes.");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("There are unsaved changes.");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UICancelWindow : WinWindow
    {
        
        public UICancelWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("There are unsaved changes.");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("There are unsaved changes.");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINewSpreadsheetsprdWindow1 : WinWindow
    {
        
        public UINewSpreadsheetsprdWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "NewSpreadsheet.sprd";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "2";
            this.WindowTitles.Add("NewSpreadsheet.sprd");
            #endregion
        }
        
        #region Properties
        public UIContentsBoxWindow1 UIContentsBoxWindow
        {
            get
            {
                if ((this.mUIContentsBoxWindow == null))
                {
                    this.mUIContentsBoxWindow = new UIContentsBoxWindow1(this);
                }
                return this.mUIContentsBoxWindow;
            }
        }
        
        public UIItemWindow1 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow1(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UINewSpreadsheetsprdTitleBar1 UINewSpreadsheetsprdTitleBar
        {
            get
            {
                if ((this.mUINewSpreadsheetsprdTitleBar == null))
                {
                    this.mUINewSpreadsheetsprdTitleBar = new UINewSpreadsheetsprdTitleBar1(this);
                }
                return this.mUINewSpreadsheetsprdTitleBar;
            }
        }
        
        public UIUpdateWindow2 UIUpdateWindow
        {
            get
            {
                if ((this.mUIUpdateWindow == null))
                {
                    this.mUIUpdateWindow = new UIUpdateWindow2(this);
                }
                return this.mUIUpdateWindow;
            }
        }
        
        public UIA1Window1 UIA1Window
        {
            get
            {
                if ((this.mUIA1Window == null))
                {
                    this.mUIA1Window = new UIA1Window1(this);
                }
                return this.mUIA1Window;
            }
        }
        
        public UIHelloWindow1 UIHelloWindow
        {
            get
            {
                if ((this.mUIHelloWindow == null))
                {
                    this.mUIHelloWindow = new UIHelloWindow1(this);
                }
                return this.mUIHelloWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIContentsBoxWindow1 mUIContentsBoxWindow;
        
        private UIItemWindow1 mUIItemWindow;
        
        private UINewSpreadsheetsprdTitleBar1 mUINewSpreadsheetsprdTitleBar;
        
        private UIUpdateWindow2 mUIUpdateWindow;
        
        private UIA1Window1 mUIA1Window;
        
        private UIHelloWindow1 mUIHelloWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIContentsBoxWindow1 : WinWindow
    {
        
        public UIContentsBoxWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "ContentsBox";
            this.WindowTitles.Add("NewSpreadsheet.sprd");
            #endregion
        }
        
        #region Properties
        public WinEdit UIContentsBoxEdit
        {
            get
            {
                if ((this.mUIContentsBoxEdit == null))
                {
                    this.mUIContentsBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIContentsBoxEdit.WindowTitles.Add("NewSpreadsheet.sprd");
                    #endregion
                }
                return this.mUIContentsBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIContentsBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("NewSpreadsheet.sprd");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("NewSpreadsheet.sprd");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINewSpreadsheetsprdTitleBar1 : WinTitleBar
    {
        
        public UINewSpreadsheetsprdTitleBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("NewSpreadsheet.sprd");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("NewSpreadsheet.sprd");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIUpdateWindow2 : WinWindow
    {
        
        public UIUpdateWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "EnterButton";
            this.WindowTitles.Add("NewSpreadsheet.sprd");
            #endregion
        }
        
        #region Properties
        public WinButton UIUpdateButton
        {
            get
            {
                if ((this.mUIUpdateButton == null))
                {
                    this.mUIUpdateButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIUpdateButton.SearchProperties[WinButton.PropertyNames.Name] = "Update";
                    this.mUIUpdateButton.WindowTitles.Add("NewSpreadsheet.sprd");
                    #endregion
                }
                return this.mUIUpdateButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIUpdateButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIA1Window1 : WinWindow
    {
        
        public UIA1Window1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "SelectionLabel";
            this.WindowTitles.Add("NewSpreadsheet.sprd");
            #endregion
        }
        
        #region Properties
        public WinText UIA1Text
        {
            get
            {
                if ((this.mUIA1Text == null))
                {
                    this.mUIA1Text = new WinText(this);
                    #region Search Criteria
                    this.mUIA1Text.SearchProperties[WinText.PropertyNames.Name] = "A1";
                    this.mUIA1Text.WindowTitles.Add("NewSpreadsheet.sprd");
                    #endregion
                }
                return this.mUIA1Text;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIA1Text;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIHelloWindow1 : WinWindow
    {
        
        public UIHelloWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "ValueLabel";
            this.WindowTitles.Add("NewSpreadsheet.sprd");
            #endregion
        }
        
        #region Properties
        public WinText UIHelloText
        {
            get
            {
                if ((this.mUIHelloText == null))
                {
                    this.mUIHelloText = new WinText(this);
                    #region Search Criteria
                    this.mUIHelloText.SearchProperties[WinText.PropertyNames.Name] = "Hello";
                    this.mUIHelloText.WindowTitles.Add("NewSpreadsheet.sprd");
                    #endregion
                }
                return this.mUIHelloText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIHelloText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIClickonanycellwithyoWindow : WinWindow
    {
        
        public UIClickonanycellwithyoWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = @"Click on any cell with your mouse to select it.  At the top the cell name and the value are displayed.  Next to them is an editable textbox with the current contents of the cells.  You can change the contents in this textbox and then hit ""Update"" or type ENTER to update the contents of the cell.";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Static";
            this.WindowTitles.Add(@"Click on any cell with your mouse to select it.  At the top the cell name and the value are displayed.  Next to them is an editable textbox with the current contents of the cells.  You can change the contents in this textbox and then hit ""Update"" or type ENTER to update the contents of the cell.");
            #endregion
        }
        
        #region Properties
        public WinText UIClickonanycellwithyoText
        {
            get
            {
                if ((this.mUIClickonanycellwithyoText == null))
                {
                    this.mUIClickonanycellwithyoText = new WinText(this);
                    #region Search Criteria
                    this.mUIClickonanycellwithyoText.SearchProperties[WinText.PropertyNames.Name] = @"Click on any cell with your mouse to select it.  At the top the cell name and the value are displayed.  Next to them is an editable textbox with the current contents of the cells.  You can change the contents in this textbox and then hit ""Update"" or type ENTER to update the contents of the cell.";
                    this.mUIClickonanycellwithyoText.WindowTitles.Add(@"Click on any cell with your mouse to select it.  At the top the cell name and the value are displayed.  Next to them is an editable textbox with the current contents of the cells.  You can change the contents in this textbox and then hit ""Update"" or type ENTER to update the contents of the cell.");
                    #endregion
                }
                return this.mUIClickonanycellwithyoText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIClickonanycellwithyoText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "OK";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Button";
            this.WindowTitles.Add("OK");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("OK");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITheenteredformulacreWindow : WinWindow
    {
        
        public UITheenteredformulacreWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "The entered formula creates a circular dependency.  Make sure your formula does n" +
                "ot depend on the cell it is in.";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Static";
            this.WindowTitles.Add("The entered formula creates a circular dependency.  Make sure your formula does n" +
                    "ot depend on the cell it is in.");
            #endregion
        }
        
        #region Properties
        public WinText UITheenteredformulacreText
        {
            get
            {
                if ((this.mUITheenteredformulacreText == null))
                {
                    this.mUITheenteredformulacreText = new WinText(this);
                    #region Search Criteria
                    this.mUITheenteredformulacreText.SearchProperties[WinText.PropertyNames.Name] = "The entered formula creates a circular dependency.  Make sure your formula does n" +
                        "ot depend on the cell it is in.";
                    this.mUITheenteredformulacreText.WindowTitles.Add("The entered formula creates a circular dependency.  Make sure your formula does n" +
                            "ot depend on the cell it is in.");
                    #endregion
                }
                return this.mUITheenteredformulacreText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUITheenteredformulacreText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UICodeMeterCCWindow : WinWindow
    {
        
        public UICodeMeterCCWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "CodeMeterCC";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32769";
            this.WindowTitles.Add("CodeMeterCC");
            #endregion
        }
        
        #region Properties
        public UIItemWindow2 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow2(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow2 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("CodeMeterCC");
            #endregion
        }
        
        #region Properties
        public WinControl UIItemDialog
        {
            get
            {
                if ((this.mUIItemDialog == null))
                {
                    this.mUIItemDialog = new WinControl(this);
                    #region Search Criteria
                    this.mUIItemDialog.SearchProperties[UITestControl.PropertyNames.ControlType] = "Dialog";
                    this.mUIItemDialog.WindowTitles.Add("CodeMeterCC");
                    #endregion
                }
                return this.mUIItemDialog;
            }
        }
        #endregion
        
        #region Fields
        private WinControl mUIItemDialog;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIProgramManagerWindow : WinWindow
    {
        
        public UIProgramManagerWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Program Manager";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Progman";
            this.WindowTitles.Add("Program Manager");
            #endregion
        }
        
        #region Properties
        public UIDesktopList UIDesktopList
        {
            get
            {
                if ((this.mUIDesktopList == null))
                {
                    this.mUIDesktopList = new UIDesktopList(this);
                }
                return this.mUIDesktopList;
            }
        }
        #endregion
        
        #region Fields
        private UIDesktopList mUIDesktopList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDesktopList : WinList
    {
        
        public UIDesktopList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "Desktop";
            this.WindowTitles.Add("Program Manager");
            #endregion
        }
        
        #region Properties
        public WinListItem UISpreadsheetGUIShortcListItem
        {
            get
            {
                if ((this.mUISpreadsheetGUIShortcListItem == null))
                {
                    this.mUISpreadsheetGUIShortcListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUISpreadsheetGUIShortcListItem.SearchProperties[WinListItem.PropertyNames.Name] = "SpreadsheetGUI - Shortcut";
                    this.mUISpreadsheetGUIShortcListItem.WindowTitles.Add("Program Manager");
                    #endregion
                }
                return this.mUISpreadsheetGUIShortcListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUISpreadsheetGUIShortcListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOpenFileSecurityWarnWindow : WinWindow
    {
        
        public UIOpenFileSecurityWarnWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open File - Security Warning";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open File - Security Warning");
            #endregion
        }
        
        #region Properties
        public UIOpenWindow UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow(this);
                }
                return this.mUIOpenWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOpenWindow mUIOpenWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOpenWindow : WinWindow
    {
        
        public UIOpenWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "4426";
            this.WindowTitles.Add("Open File - Security Warning");
            #endregion
        }
        
        #region Properties
        public WinButton UIOpenButton
        {
            get
            {
                if ((this.mUIOpenButton == null))
                {
                    this.mUIOpenButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOpenButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenButton.WindowTitles.Add("Open File - Security Warning");
                    #endregion
                }
                return this.mUIOpenButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOpenButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISaveWindow : WinWindow
    {
        
        public UISaveWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Save");
            #endregion
        }
        
        #region Properties
        public WinTitleBar UISaveTitleBar
        {
            get
            {
                if ((this.mUISaveTitleBar == null))
                {
                    this.mUISaveTitleBar = new WinTitleBar(this);
                    #region Search Criteria
                    this.mUISaveTitleBar.WindowTitles.Add("Save");
                    #endregion
                }
                return this.mUISaveTitleBar;
            }
        }
        
        public UICancelWindow1 UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow1(this);
                }
                return this.mUICancelWindow;
            }
        }
        
        public UIDetailsPanePane UIDetailsPanePane
        {
            get
            {
                if ((this.mUIDetailsPanePane == null))
                {
                    this.mUIDetailsPanePane = new UIDetailsPanePane(this);
                }
                return this.mUIDetailsPanePane;
            }
        }
        
        public UISaveWindow1 UISaveWindow1
        {
            get
            {
                if ((this.mUISaveWindow1 == null))
                {
                    this.mUISaveWindow1 = new UISaveWindow1(this);
                }
                return this.mUISaveWindow1;
            }
        }
        
        public UIItemWindow3 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow3(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinTitleBar mUISaveTitleBar;
        
        private UICancelWindow1 mUICancelWindow;
        
        private UIDetailsPanePane mUIDetailsPanePane;
        
        private UISaveWindow1 mUISaveWindow1;
        
        private UIItemWindow3 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UICancelWindow1 : WinWindow
    {
        
        public UICancelWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Save");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("Save");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDetailsPanePane : WinPane
    {
        
        public UIDetailsPanePane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Details Pane";
            this.WindowTitles.Add("Save");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Save");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISaveWindow1 : WinWindow
    {
        
        public UISaveWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Save");
            #endregion
        }
        
        #region Properties
        public WinButton UISaveButton
        {
            get
            {
                if ((this.mUISaveButton == null))
                {
                    this.mUISaveButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISaveButton.SearchProperties[WinButton.PropertyNames.Name] = "Save";
                    this.mUISaveButton.WindowTitles.Add("Save");
                    #endregion
                }
                return this.mUISaveButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISaveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow3 : WinWindow
    {
        
        public UIItemWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1001";
            this.WindowTitles.Add("Save");
            #endregion
        }
        
        #region Properties
        public WinEdit UIFilenameEdit
        {
            get
            {
                if ((this.mUIFilenameEdit == null))
                {
                    this.mUIFilenameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIFilenameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "File name:";
                    this.mUIFilenameEdit.WindowTitles.Add("Save");
                    #endregion
                }
                return this.mUIFilenameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIFilenameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UICUsersmarcheseSourceWindow : WinWindow
    {
        
        public UICUsersmarcheseSourceWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "C:\\Users\\marchese\\Source\\Repos\\CS3500_Tim_CoS\\PS4\\SpreadsheetGUI\\bin\\Debug\\NewNam" +
                "e.sprd";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("C:\\Users\\marchese\\Source\\Repos\\CS3500_Tim_CoS\\PS4\\SpreadsheetGUI\\bin\\Debug\\NewNam" +
                    "e.sprd");
            #endregion
        }
        
        #region Properties
        public WinTitleBar UICUsersmarcheseSourceTitleBar
        {
            get
            {
                if ((this.mUICUsersmarcheseSourceTitleBar == null))
                {
                    this.mUICUsersmarcheseSourceTitleBar = new WinTitleBar(this);
                    #region Search Criteria
                    this.mUICUsersmarcheseSourceTitleBar.WindowTitles.Add("C:\\Users\\marchese\\Source\\Repos\\CS3500_Tim_CoS\\PS4\\SpreadsheetGUI\\bin\\Debug\\NewNam" +
                            "e.sprd");
                    #endregion
                }
                return this.mUICUsersmarcheseSourceTitleBar;
            }
        }
        
        public UIItemWindow4 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow4(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIChangedWindow UIChangedWindow
        {
            get
            {
                if ((this.mUIChangedWindow == null))
                {
                    this.mUIChangedWindow = new UIChangedWindow(this);
                }
                return this.mUIChangedWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinTitleBar mUICUsersmarcheseSourceTitleBar;
        
        private UIItemWindow4 mUIItemWindow;
        
        private UIChangedWindow mUIChangedWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow4 : WinWindow
    {
        
        public UIItemWindow4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("C:\\Users\\marchese\\Source\\Repos\\CS3500_Tim_CoS\\PS4\\SpreadsheetGUI\\bin\\Debug\\NewNam" +
                    "e.sprd");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("C:\\Users\\marchese\\Source\\Repos\\CS3500_Tim_CoS\\PS4\\SpreadsheetGUI\\bin\\Debug\\NewNam" +
                            "e.sprd");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIChangedWindow : WinWindow
    {
        
        public UIChangedWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "ValueLabel";
            this.WindowTitles.Add("C:\\Users\\marchese\\Source\\Repos\\CS3500_Tim_CoS\\PS4\\SpreadsheetGUI\\bin\\Debug\\NewNam" +
                    "e.sprd");
            #endregion
        }
        
        #region Properties
        public WinText UIChangedText
        {
            get
            {
                if ((this.mUIChangedText == null))
                {
                    this.mUIChangedText = new WinText(this);
                    #region Search Criteria
                    this.mUIChangedText.SearchProperties[WinText.PropertyNames.Name] = "Changed";
                    this.mUIChangedText.WindowTitles.Add("C:\\Users\\marchese\\Source\\Repos\\CS3500_Tim_CoS\\PS4\\SpreadsheetGUI\\bin\\Debug\\NewNam" +
                            "e.sprd");
                    #endregion
                }
                return this.mUIChangedText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIChangedText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOpenaSpreadsheetWindow : WinWindow
    {
        
        public UIOpenaSpreadsheetWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open a Spreadsheet";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open a Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIItemWindow5 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow5(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIOpenWindow1 UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow1(this);
                }
                return this.mUIOpenWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow5 mUIItemWindow;
        
        private UIOpenWindow1 mUIOpenWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow5 : WinWindow
    {
        
        public UIItemWindow5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open a Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIChangedSheetsprdListItem UIChangedSheetsprdListItem
        {
            get
            {
                if ((this.mUIChangedSheetsprdListItem == null))
                {
                    this.mUIChangedSheetsprdListItem = new UIChangedSheetsprdListItem(this);
                }
                return this.mUIChangedSheetsprdListItem;
            }
        }
        
        public UINewNamesprdListItem UINewNamesprdListItem
        {
            get
            {
                if ((this.mUINewNamesprdListItem == null))
                {
                    this.mUINewNamesprdListItem = new UINewNamesprdListItem(this);
                }
                return this.mUINewNamesprdListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIChangedSheetsprdListItem mUIChangedSheetsprdListItem;
        
        private UINewNamesprdListItem mUINewNamesprdListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIChangedSheetsprdListItem : WinListItem
    {
        
        public UIChangedSheetsprdListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "ChangedSheet.sprd";
            this.WindowTitles.Add("Open a Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open a Spreadsheet");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINewNamesprdListItem : WinListItem
    {
        
        public UINewNamesprdListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "NewName.sprd";
            this.WindowTitles.Add("Open a Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open a Spreadsheet");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOpenWindow1 : WinWindow
    {
        
        public UIOpenWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Open a Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinSplitButton UIOpenSplitButton
        {
            get
            {
                if ((this.mUIOpenSplitButton == null))
                {
                    this.mUIOpenSplitButton = new WinSplitButton(this);
                    #region Search Criteria
                    this.mUIOpenSplitButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenSplitButton.WindowTitles.Add("Open a Spreadsheet");
                    #endregion
                }
                return this.mUIOpenSplitButton;
            }
        }
        #endregion
        
        #region Fields
        private WinSplitButton mUIOpenSplitButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UICUsersmarcheseSourceWindow1 : WinWindow
    {
        
        public UICUsersmarcheseSourceWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "C:\\Users\\marchese\\Source\\Repos\\CS3500_Tim_CoS\\PS4\\SpreadsheetGUI\\bin\\Debug\\Change" +
                "dSheet.sprd";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("C:\\Users\\marchese\\Source\\Repos\\CS3500_Tim_CoS\\PS4\\SpreadsheetGUI\\bin\\Debug\\Change" +
                    "dSheet.sprd");
            #endregion
        }
        
        #region Properties
        public UIItemWindow6 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow6(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UINonEmptyCellWindow UINonEmptyCellWindow
        {
            get
            {
                if ((this.mUINonEmptyCellWindow == null))
                {
                    this.mUINonEmptyCellWindow = new UINonEmptyCellWindow(this);
                }
                return this.mUINonEmptyCellWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow6 mUIItemWindow;
        
        private UINonEmptyCellWindow mUINonEmptyCellWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow6 : WinWindow
    {
        
        public UIItemWindow6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("C:\\Users\\marchese\\Source\\Repos\\CS3500_Tim_CoS\\PS4\\SpreadsheetGUI\\bin\\Debug\\Change" +
                    "dSheet.sprd");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("C:\\Users\\marchese\\Source\\Repos\\CS3500_Tim_CoS\\PS4\\SpreadsheetGUI\\bin\\Debug\\Change" +
                            "dSheet.sprd");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINonEmptyCellWindow : WinWindow
    {
        
        public UINonEmptyCellWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "ValueLabel";
            this.WindowTitles.Add("C:\\Users\\marchese\\Source\\Repos\\CS3500_Tim_CoS\\PS4\\SpreadsheetGUI\\bin\\Debug\\Change" +
                    "dSheet.sprd");
            #endregion
        }
        
        #region Properties
        public WinText UINonEmptyCellText
        {
            get
            {
                if ((this.mUINonEmptyCellText == null))
                {
                    this.mUINonEmptyCellText = new WinText(this);
                    #region Search Criteria
                    this.mUINonEmptyCellText.SearchProperties[WinText.PropertyNames.Name] = "NonEmptyCell";
                    this.mUINonEmptyCellText.WindowTitles.Add("C:\\Users\\marchese\\Source\\Repos\\CS3500_Tim_CoS\\PS4\\SpreadsheetGUI\\bin\\Debug\\Change" +
                            "dSheet.sprd");
                    #endregion
                }
                return this.mUINonEmptyCellText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUINonEmptyCellText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIConfirmSaveAsWindow : WinWindow
    {
        
        public UIConfirmSaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Confirm Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Confirm Save As");
            #endregion
        }
        
        #region Properties
        public UIConfirmSaveAsPane UIConfirmSaveAsPane
        {
            get
            {
                if ((this.mUIConfirmSaveAsPane == null))
                {
                    this.mUIConfirmSaveAsPane = new UIConfirmSaveAsPane(this);
                }
                return this.mUIConfirmSaveAsPane;
            }
        }
        #endregion
        
        #region Fields
        private UIConfirmSaveAsPane mUIConfirmSaveAsPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIConfirmSaveAsPane : WinPane
    {
        
        public UIConfirmSaveAsPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Confirm Save As";
            this.WindowTitles.Add("Confirm Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Confirm Save As");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
}
#endif